{"version":3,"sources":["util/MyButton.tsx","redux/actions/dataActions.tsx","redux/types.tsx","components/DeleteScream.tsx","components/LikeButton.tsx","components/Comments.tsx","components/CommentForm.tsx","components/ScreamDialog.tsx","components/Scream.tsx","redux/actions/userActions.tsx","components/EditDetails.tsx","components/Profile.tsx","pages/home.tsx","pages/signup.tsx","pages/login.tsx","components/PostScream.tsx","components/Notifications.tsx","components/Navbar.tsx","util/AuthRoute.tsx","redux/reducers/userReducer.tsx","redux/reducers/dataReducer.tsx","redux/reducers/uiReducer.tsx","redux/store.tsx","components/StaticProfile.tsx","pages/user.tsx","App.tsx","index.tsx","images/no-img.png"],"names":["MyButton","children","onClick","tip","btnClassName","tipClassName","Tooltip","title","className","placement","IconButton","clearErrors","dispatch","type","DeletScream","screamId","useState","open","setOpen","handleClose","useDispatch","color","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogActions","axios","delete","then","payload","catch","err","console","log","deleteScream","LikeButton","authenticated","useSelector","store","user","likes","find","like","get","res","data","unlikeScream","likeScream","FavoriteBorder","to","useStyles","makeStyles","theme","createStyles","root","display","margin","spacing","small","width","height","large","leftText","textAlign","rightText","justifyContent","Comments","id","classes","comments","scream","Grid","container","map","comment","index","body","createdAt","userImage","userHandle","key","item","sm","Avatar","alt","src","Typography","variant","component","Link","dayjs","format","Divider","CommentForm","useForm","reset","register","handleSubmit","UI","style","onSubmit","newComment","commentData","post","response","submitComment","rows","name","placeholder","maxLength","ref","required","errors","ScreamDialog","props","oldPath","newPath","url","setUrl","loading","userCredentials","credentials","location","useLocation","handleOpen","pathname","window","history","pushState","getScream","urlCorrect","useEffect","openDialog","dialogMarkUp","CircularProgress","size","handle","likeCount","commentCount","UnfoldMore","DialogContent","Button","Scream","extend","relativeTime","screams","deleteButton","DeleteScream","fromNow","logoutUser","localStorage","removeItem","defaults","headers","common","setAuthorizationHeader","token","setItem","getItem","getUserData","error","detail","bio","website","EditDetails","userDetail","setUSerDetail","editUserDetails","defaultValue","StyledBadge","withStyles","badge","backgroundColor","boxShadow","palette","background","paper","position","top","left","borderRadius","animation","border","content","transform","opacity","Badge","Profile","loadingUser","Paper","overlap","anchorOrigin","vertical","horizontal","imageUrl","hidden","onChange","event","image","target","files","formData","FormData","append","uploadImage","fileInput","document","getElementById","click","href","rel","align","Home","Signup","errorGeneral","setErrorGeneral","setError","getValues","useHistory","p","general","newUserData","push","signupUser","pattern","email","minLength","password","onBlur","e","checkPassword","value","confirmPassword","Login","userNoImg","userData","loginUser","PostScream","newPost","newScream","disabled","Notifications","anchorEl","state","setState","notifications","notificationsIcon","length","countNot","filter","not","read","c","badgeContent","notificationsMarkup","verb","time","iconColor","icon","marginRight","MenuItem","recipient","sender","aria-owns","undefined","aria-haspopup","Menu","Boolean","onEntered","notificationsIds","unreadNotificationsIds","notificationId","Navbar","AppBar","Toolbar","AuthRoute","Component","rest","initialState","middleware","thunk","reducers","combineReducers","action","forEach","findIndex","indexDelete","splice","indexComment","createStore","compose","applyMiddleware","StaticProfile","profile","User","setProfile","useParams","handleParam","screamIdParam","screamsMarkup","jwt_decode","exp","Date","now","App","exact","path","home","login","signup","ReactDOM","render","module","exports"],"mappings":"qTAaaA,EAAW,SAAC,GAAiE,IAAhEC,EAA+D,EAA/DA,SAAUC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,IAAKC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,aAC5D,OACI,kBAACC,EAAA,EAAD,CAASC,MAAOJ,EAAKK,UAAWH,EAAcI,UAAU,OACpD,kBAACC,EAAA,EAAD,CAAYR,QAASA,EAASM,UAAWJ,GACpCH,K,6FCsIJU,EAAc,kBAAM,SAACC,GAC9BA,EAAS,CACLC,KC/IoB,mBC2DbC,EAzDK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAoB,EAGfC,oBAAS,GAHM,mBAGhCC,EAHgC,KAG1BC,EAH0B,KAUjCC,EAAc,WAChBD,GAAQ,IAINN,EAAWQ,cAQjB,OACI,kBAAC,WAAD,KACI,kBAAC,EAAD,CACIjB,IAAI,gBACJD,QAtBO,WACfgB,GAAQ,KAuBA,kBAAC,IAAD,CAAeG,MAAM,eAEzB,kBAACC,EAAA,EAAD,CACIL,KAAMA,EACNM,QAASJ,EACTK,WAAS,EACTC,SAAS,MAET,kBAACC,EAAA,EAAD,sDAGA,kBAACC,EAAA,EAAD,KACI,4BAAQzB,QAASiB,EACbN,KAAK,SACLL,UAAU,iBAFd,UAKA,4BAAQN,QA5BI,WACxBU,EFmEoB,SAACG,GAAD,OAAsB,SAACH,GAC/CA,EAAS,CACLC,KC5FkB,eD8FtBe,IAAMC,OAAN,kBAAwBd,IACnBe,MAAK,WACFlB,EAAS,CACLC,KCxFa,gBDyFbkB,QAAShB,IAEbH,EAASD,QAEZqB,OAAM,SAACC,GAAD,OAAcC,QAAQC,IAAIF,OE/ExBG,CAAarB,IACtBG,GAAQ,IA2BQL,KAAK,SACLL,UAAU,8BAFd,c,8DCIL6B,EAtDI,SAAC,GAAqB,IAApBtB,EAAmB,EAAnBA,SAGXuB,EAAgBC,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAKH,iBAEvD1B,EAAWQ,cAEbqB,EAAYF,aAAY,SAACC,GAAD,OAAgBA,EAAMC,QA2ClD,OAvBqBH,EAjBbG,EAAKC,OAASD,EAAKC,MAAMC,MACzB,SAACC,GAAD,OAAeA,EAAK7B,WAAaA,KA2BzB,kBAAC,EAAD,CAAUZ,IAAI,YAAYD,QAhBd,WACxBU,EHmCoB,SAACG,GAAD,OAAsB,SAACH,GAC3CgB,IAAMiB,IAAN,kBAAqB9B,EAArB,YACKe,MAAK,SAACgB,GACHlC,EAAS,CACLC,KCtDS,gBDuDTkB,QAASe,EAAIC,UAGpBf,OAAM,SAACC,QG3CHe,CAAajC,MAgBN,kBAAC,IAAD,CAAcM,MAAM,eAKxB,kBAAC,EAAD,CAAUlB,IAAI,OAAOD,QA1BX,WACtBU,EHuBkB,SAACG,GAAD,OACtB,SAACH,GACGgB,IAAMiB,IAAN,kBAAqB9B,EAArB,UACKe,MAAK,SAACgB,GACHlC,EAAS,CACLC,KCxCO,cDyCPkB,QAASe,EAAIC,UAGpBf,OAAM,SAACC,QGhCHgB,CAAWlC,MA0BJ,kBAACmC,EAAA,EAAD,CAAgB7B,MAAM,eAhBlC,kBAAC,EAAD,CAAUlB,IAAI,QACV,kBAAC,IAAD,CAAMgD,GAAG,UACL,kBAACD,EAAA,EAAD,CAAgB7B,MAAM,iB,6CC1BpC+B,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,QAAS,OACT,QAAS,CACLC,OAAQJ,EAAMK,QAAQ,KAG9BC,MAAO,CACHC,MAAOP,EAAMK,QAAQ,GACrBG,OAAQR,EAAMK,QAAQ,IAE1BI,MAAO,CACHF,MAAOP,EAAMK,QAAQ,GACrBG,OAAQR,EAAMK,QAAQ,IAE1BK,SAAU,CACNC,UAAW,QAEfC,UAAW,CAEPT,QAAS,OACTU,eAAgB,iBA0DbC,EApDE,SAAC,GAAgB,EAAdC,GAAe,IAEzBC,EAAUlB,IAEVmB,EAAWhC,aAAY,SAACC,GAAD,OAAgBA,EAAMO,KAAKyB,OAAOD,YAE/D,OACI,kBAACE,EAAA,EAAD,CAAMC,WAAS,GACVH,GAAYA,EAASI,KAAI,SAACC,EAAcC,GAAmB,IAChDC,EAA2CF,EAA3CE,KAAMC,EAAqCH,EAArCG,UAAWC,EAA0BJ,EAA1BI,UAAWC,EAAeL,EAAfK,WACpC,OACI,kBAAC,WAAD,CAAUC,IAAKH,GACX,kBAACN,EAAA,EAAD,CAAMU,MAAI,EAACC,GAAI,IACX,kBAACX,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMU,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CAAQC,IAAI,gBACRC,IAAKP,EACLxE,UAAW8D,EAAQP,SAE3B,kBAACU,EAAA,EAAD,CAAMU,MAAI,EAACC,GAAI,IACX,yBAAK5E,UAAU,gBACX,kBAACgF,EAAA,EAAD,CACIC,QAAQ,KACRC,UAAWC,IACXxC,GAAE,iBAAY8B,GACd5D,MAAM,UACNoC,QAAQ,UAEPwB,GAEL,kBAACO,EAAA,EAAD,CACIC,QAAQ,QACRpE,MAAM,gBACNoC,QAAQ,UAHZ,gBAKwBmC,IAAMb,GAAWc,OAAO,yBAEhD,kBAACL,EAAA,EAAD,CAAYC,QAAQ,SACfX,MAKjB,kBAACgB,EAAA,EAAD,CAASL,QAAQ,iB,QCxB9BM,EA/CK,SAAC,GAAuB,IAAD,IAApBhF,EAAoB,EAApBA,SAAoB,EAGGiF,cAAlCC,EAH+B,EAG/BA,MAAOC,EAHwB,EAGxBA,SAAUC,EAHc,EAGdA,aAEnBvF,EAAWQ,cACXgF,EAAK7D,aAAY,SAACC,GAAD,OAAgBA,EAAM4D,MAuC7C,OAtCsB7D,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAKH,iBAUzD,yBAAK+D,MAAO,CAAEpC,UAAW,WACrB,0BAAMqC,SAAUH,GARP,SAACI,GACd3F,ELyDqB,SAACG,EAAeyF,GAAhB,OAAqC,SAAC5F,GAC/DgB,IAAM6E,KAAN,kBAAsB1F,EAAtB,YAA0CyF,GACrC1E,MAAK,SAACgB,GACHlC,EAAS,CACLC,KClEc,iBDmEdkB,QAASe,EAAIC,OAEjBnC,EAASD,QAEZqB,OAAM,SAACC,GACJrB,EAAS,CACLC,KCrFU,aDsFVkB,QAASE,EAAIyE,SAAS3D,WKrErB4D,CAAc5F,EAAUwF,IACjCN,QAOQ,8BAAUW,KAAM,EAAGC,KAAK,OACpBC,YAAY,oBACZtG,UAAU,eACVuG,UAAW,IACXC,IAAKd,EAAS,CACVe,UAAU,EACVF,UAAW,SAElB,UAAAX,EAAGc,cAAH,eAAWtC,UAAY,0BAAMpE,UAAU,kCAAhB,UACnB4F,EAAGc,cADgB,aACnB,EAAWtC,SAQhB,yBAAKpE,UAAU,QACX,4BAAQA,UAAU,6BACdK,KAAK,UADT,YAKR,wBAAIL,UAAU,uBAElB,MCoGO2G,EArIM,SAACC,GAElB,IAAM5C,EAAS4C,EAAM5C,OAF8C,EAI3CxD,oBAAS,GAJkC,mBAI5DC,EAJ4D,KAItDC,EAJsD,KAK3D+D,EAAyBT,EAAzBS,WAAYlE,EAAayD,EAAbzD,SAL+C,EAO7CC,mBAAS,CAC3BqG,QAAS,GACTC,QAAS,KATsD,mBAO5DC,EAP4D,KAOvDC,EAPuD,KAY7DC,EAAUlF,aAAY,SAACC,GAAD,OAAgBA,EAAM4D,GAAGqB,WAC/CC,EAAkBnF,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAKkF,eAEzD/G,EAAWQ,cAEXwG,EAAWC,cAEXC,EAAa,WACf,IAAIT,EAAU,KAAOO,EAASG,SACxBT,EAAO,mBAAerC,EAAf,mBAAoClE,GAG7CsG,IAAYC,IACZD,EAAO,mBAAepC,IAE1B+C,OAAOC,QAAQC,UAAU,KAAM,GAAIZ,GACnCE,EAAO,CAAEH,UAASC,YAClBpG,GAAQ,GACRN,ENlBiB,SAACG,GAAD,OAAsB,SAACH,GAE5CgB,IACKiB,IADL,kBACoB9B,IACfe,MAAK,SAACgB,GACHlC,EAAS,CACLC,KC5BU,aD6BVkB,QAASe,EAAIC,UAIpBf,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,OMOnBkG,CAAU3D,EAAOzD,YAIxBI,EAAc,WAChB,IAAIiH,EAAab,EAAIF,QAEjBe,EADgB,QAAhBb,EAAIF,QACS,IAEH,mBAAepC,GAC7B+C,OAAOC,QAAQC,UAAU,KAAM,GAAIE,GACnClH,GAAQ,GACRN,EAASD,MAIb0H,qBAAU,WACFjB,EAAMkB,YACNR,MAEL,CAACF,IAGJ,IAAMW,EAAed,EAEb,kBAACe,EAAA,EAAD,CAAkBC,KAAM,MAGxB,oCAEI,yBAAKjI,UAAU,YACX,yBAAKA,UAAU,YACX,yBAAK+E,IAAKf,EAAOQ,UAAWM,IAAI,UAAU9E,UAAU,mBAExD,yBAAKA,UAAU,YACX,kBAACgF,EAAA,EAAD,CACIE,UAAWC,IACXtE,MAAM,UACNoE,QAAQ,KACRtC,GAAE,iBAAYuE,EAAgBgB,SAJlC,IAMMhB,EAAgBgB,QAEtB,wBAAIlI,UAAU,wBACd,kBAACgF,EAAA,EAAD,CAAYC,QAAQ,QAAQpE,MAAM,aAC7BuE,IAAM8B,EAAgB3C,WAAWc,OAAO,wBAE7C,wBAAIrF,UAAU,wBACd,kBAACgF,EAAA,EAAD,CAAYC,QAAQ,SACfjB,EAAOM,MAEZ,yBAAKtE,UAAU,OACX,yBAAKA,UAAU,YACX,kBAAC,EAAD,CAAYO,SAAUyD,EAAOzD,WADjC,UAEYyD,EAAOmE,WAGnB,yBAAKnI,UAAU,YACX,kBAAC,EAAD,CAAUL,IAAI,YACV,kBAAC,IAAD,CAAUkB,MAAM,eAFxB,aAIWmD,EAAOoE,iBAK9B,yBAAKpI,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAaO,SAAUyD,EAAOzD,aAGtC,yBAAKP,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAU6D,GAAIG,EAAOzD,cAKzC,OACI,kBAAC,WAAD,KACI,kBAAC,EAAD,CAAUb,QAAS4H,EAAY3H,IAAI,iBAC/B,kBAAC0I,EAAA,EAAD,CAAYxH,MAAM,eAEtB,kBAACC,EAAA,EAAD,CACIL,KAAMA,EACNM,QAASJ,EACTK,WAAS,EACTC,SAAS,MACT,kBAACqH,EAAA,EAAD,CAAetI,UAAU,kBACpB+H,GAEL,kBAAC5G,EAAA,EAAD,KACI,kBAACoH,EAAA,EAAD,CACI1H,MAAM,UACNnB,QAAUiB,GAFd,YC5EL6H,EApDA,SAAC5B,GAEZxB,IAAMqD,OAAOC,KAEb,IAAIzG,EAAYF,aAAY,SAACC,GAAD,OAAgBA,EAAMC,QAE5CH,EAAgBC,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAKH,iBAEvDkC,EAASjC,aAAY,SAACC,GAAD,OAAgBA,EAAMO,KAAKoG,QAAQ/B,EAAMvC,UAE9DuE,EAAe9G,GAAiBkC,EAAOS,aAAexC,EAAKkF,YAAYe,OAErE,kBAACW,EAAD,CAActI,SAAUyD,EAAOzD,WAC/B,KAER,OACI,6BACI,yBAAKP,UAAU,aACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,YACX,yBAAK+E,IAAKf,EAAOQ,UAAWxE,UAAU,WAAW8E,IAAI,WAEzD,yBAAK9E,UAAU,YACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cACV,kBAACgF,EAAA,EAAD,CACAE,UAAWC,IACXxC,GAAE,iBAAYqB,EAAOS,aAChBT,EAAOS,YAEZ,+CAA2BW,IAAMpB,EAAOO,WAAWuE,YAEvD,0BAAM9I,UAAU,iBAAiB4I,GACjC,uBAAG5I,UAAU,aACRgE,EAAOM,KAAK,6BACb,kBAAC,EAAD,CAAY/D,SAAUyD,EAAOzD,WAFjC,UAGYyD,EAAOmE,UACf,kBAAC,EAAD,CAAUxI,IAAI,YACV,kBAAC,IAAD,CAAUkB,MAAM,eALxB,aAOWmD,EAAOoE,aACd,0BAAMpI,UAAU,iBACZ,kBAAC,EAAD,CAAcgE,OAAQA,EAAQ8D,WAAYlB,EAAMkB,qBCTvEiB,EAAa,kBAAM,SAAC3I,GAC7B4I,aAAaC,WAAW,gBACjB7H,IAAM8H,SAASC,QAAQC,OAAvB,cACPhJ,EAAS,CAAEC,KPpDmB,2BOwD5BgJ,EAAyB,SAACC,GAC5BN,aAAaO,QAAQ,QAArB,iBAAwCD,IACxClI,IAAM8H,SAASC,QAAQC,OAAvB,cAAiDJ,aAAaQ,QAAQ,UAG7DC,EAAc,kBAAM,SAACrJ,GAC9BA,EAAS,CAAEC,KP5Da,iBO6DxBe,IAAMiB,IAAI,SACLf,MAAK,SAACgB,GACHlC,EAAS,CACLC,KPjEQ,WOkERkB,QAASe,EAAIC,UAGpBf,OAAM,SAACkI,GAAD,OAAgBhI,QAAQC,IAAI+H,Q,uICvDvCC,GAAS,CACTC,IAAK,GACLC,QAAS,GACTzC,SAAU,IAiGC0C,GA1FK,WAAO,IAAD,EAEEtJ,oBAAS,GAFX,mBAEfC,EAFe,KAETC,EAFS,OAGcF,mBAASmJ,IAHvB,mBAGfI,EAHe,KAGHC,EAHG,OAIoBxE,cAAlCE,EAJc,EAIdA,SAAUC,EAJI,EAIJA,aAAcF,EAJV,EAIUA,MAE1ByB,EAAkBnF,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAKkF,eAEzD/G,EAAWQ,cAiBXD,EAAc,WAChB8E,IACA/E,GAAQ,IAWZ,OAHAmH,qBAAU,WAlBNmC,EAAc,CACVJ,IAAK1C,EAAgB0C,IAAM1C,EAAgB0C,IAAM,GACjDC,QAAS3C,EAAgB2C,QAAU3C,EAAgB2C,QAAU,GAC7DzC,SAAUF,EAAgBE,SAAWF,EAAgBE,SAAW,OAiBrE,CAACF,IAEA,kBAAC,WAAD,KACI,kBAAC,EAAD,CAAUxH,QATC,WACfgB,GAAQ,IAQ2Bf,IAAI,gBAC/B,kBAAC,KAAD,CAAUkB,MAAM,aAEpB,kBAACC,EAAA,EAAD,CACIL,KAAMA,EACNM,QAASJ,EACTK,WAAS,EACTC,SAAS,MAET,kBAACC,EAAA,EAAD,0BACA,kBAACoH,EAAA,EAAD,KACI,0BAAMxC,SAAUH,GAxCf,SAACpD,GACdnC,ED+CuB,SAAC2J,GAAD,OAAqB,SAAC3J,GACjDA,EAAS,CAACC,KPnFc,iBOoFxBe,IAAM6E,KAAK,SAAU8D,GACpBzI,MAAK,WACFlB,EAASqJ,QAEZjI,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OCrDbwI,CAAgB1H,OAuC2BvC,UAAU,eAC9C,8BAAUoG,KAAM,EAAGC,KAAK,MACpBC,YAAY,6BACZtG,UAAU,eACVkK,aAAcH,EAAWH,IACzBpD,IAAKd,EAAS,CACVa,UAAW,QACT,6BACV,2BAAOF,KAAK,UAAUhG,KAAK,OACvBL,UAAU,eACVsG,YAAY,eACZ4D,aAAcH,EAAWF,QACzBrD,IAAKd,EAAS,CACVa,UAAW,OACT,6BACV,2BAAOF,KAAK,WAAWhG,KAAK,OACxBL,UAAU,eACVsG,YAAY,iBACZ4D,aAAcH,EAAW3C,SACzBZ,IAAKd,EAAS,CACVa,UAAW,OAEnB,kBAACpF,EAAA,EAAD,KACI,4BAAQzB,QAASiB,EACjBN,KAAK,SACDL,UAAU,iBAFd,UAKA,4BAAQK,KAAK,SACTL,UAAU,8BADd,cCnFtBmK,GAAcC,cAAW,SAACtH,GAAD,OAC3BC,YAAa,CACTsH,MAAO,CACHC,gBAAiB,UACjBzJ,MAAO,UACP0J,UAAU,aAAD,OAAezH,EAAM0H,QAAQC,WAAWC,OACjD,WAAY,CACRC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNxH,MAAO,OACPC,OAAQ,OACRwH,aAAc,MACdC,UAAW,oCACXC,OAAQ,yBACRC,QAAS,OAGjB,oBAAqB,CACjB,KAAM,CACFC,UAAW,YACXC,QAAS,GAEb,OAAQ,CACJD,UAAW,aACXC,QAAS,QAzBLf,CA6BlBgB,MACIxI,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,QAAS,OACT,QAAS,CACLC,OAAQJ,EAAMK,QAAQ,KAG9BI,MAAO,CACHF,MAAOP,EAAMK,QAAQ,IACrBG,OAAQR,EAAMK,QAAQ,UAqInBkI,GAjIC,WAEZ,IAAMvH,EAAUlB,KAEV0I,EAAcvJ,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAKgF,WACrDnF,EAAgBC,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAKH,iBACvDoF,EAAkBnF,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAKkF,eAEzD/G,EAAWQ,cAqBjB,OACK0K,EA6FK,kBAAC,WAAD,KACE,kBAACtD,EAAA,EAAD,OA7FJlG,EACI,kBAAC,WAAD,KACI,kBAACyJ,GAAA,EAAD,CAAOvL,UAAU,iBACb,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,iBACX,kBAACmK,GAAD,CACIqB,QAAQ,SACRC,aAAc,CACVC,SAAU,SACVC,WAAY,SAEhB1G,QAAQ,OAER,kBAACJ,EAAA,EAAD,CAAQE,IAAKmC,EAAgB0E,SACzB9G,IAAI,UAAU9E,UAAW8D,EAAQP,SAGzC,2BAAOlD,KAAK,OAAOwD,GAAG,aAAagI,QAAQ,EACvCC,SAtCN,SAACC,GACvB,IAAMC,EAAQD,EAAME,OAAOC,MAAM,GAC3BC,EAAgB,IAAIC,SAC1BD,EAASE,OAAO,QAASL,EAAOA,EAAM3F,MACtCjG,EFNmB,SAAC+L,GAAD,OAAmB,SAAC/L,GAC3CA,EAAS,CAAEC,KPzEa,iBO0ExBe,IAAM6E,KAAK,YAAakG,GACnB7K,MAAK,WACFlB,EAASqJ,QAEZjI,OAAM,SAACkI,GAAD,OAAgBhI,QAAQC,IAAI+H,OEA1B4C,CAAYH,OAmCG,kBAAC,EAAD,CAAUzM,QA/BZ,WACtB,IAAM6M,EAAYC,SAASC,eAAe,cACjC,OAATF,QAAS,IAATA,KAAWG,SA6BmD/M,IAAI,wBACtC,kBAAC,KAAD,CAAUkB,MAAM,cAGxB,yBAAKb,UAAU,mBACX,kBAAC,KAAD,CACIkF,UAAWC,IAAMxC,GAAE,iBAAYuE,EAAgBgB,QAC/CjD,QAAQ,MAFZ,IAGMiC,EAAgBgB,QAEtB,6BACChB,EAAgB0C,KACb,kBAAC5E,EAAA,EAAD,KACKkC,EAAgB0C,KAEzB,6BACC1C,EAAgBE,UACb,kBAAC,WAAD,KACI,kBAAC,IAAD,MACA,kCAAQF,EAAgBE,WAEhC,6BACCF,EAAgB2C,SACb,kBAAC,WAAD,KACI,kBAAC,KAAD,CAAUhJ,MAAM,YAChB,uBACI8L,KAAMzF,EAAgB2C,QACtBoC,OAAO,SACPW,IAAI,uBACH,IAAK1F,EAAgB2C,UAKlC,6BACA,kBAAC,KAAD,MACC,IAAI,wCAAczE,IAAM8B,EAAgB3C,WAAWc,OAAO,aAC3D,6BACA,yBAAKQ,MAAO,CAAE5C,QAAS,OAAQU,eAAgB,iBAC3C,kBAAC,EAAD,CAAUjE,QAhErB,WACjBU,EAAS2I,MA+DoDpJ,IAAI,UACjC,kBAAC,KAAD,CAAgBkB,MAAM,aAE1B,kBAAC,GAAD,WAMlB,kBAAC,WAAD,KACE,kBAAC0K,GAAA,EAAD,CAAOvL,UAAU,QACb,kBAACgF,EAAA,EAAD,CAAYC,QAAQ,QAAQ4H,MAAM,UAAlC,wCAGA,yBAAK7M,UAAU,yBACX,kBAACuI,EAAA,EAAD,CACItD,QAAQ,YACRgD,KAAK,QACLpH,MAAM,UACNqE,UAAWC,IACXnF,UAAU,oBACV2C,GAAG,UANP,SAQA,kBAAC4F,EAAA,EAAD,CACItD,QAAQ,YACRpE,MAAM,YACNoH,KAAK,QACL/C,UAAWC,IACXnF,UAAU,oBACV2C,GAAG,WANP,eC5HbmK,GA7CF,WAGT,IAAM7F,EAAUlF,aAAY,SAACC,GAAD,OAAgBA,EAAM4D,GAAGqB,WAC/C0B,EAAU5G,aAAY,SAACC,GAAD,OAAgBA,EAAMO,KAAKoG,WAEjDvI,EAAWQ,cAMjB,OAJAiH,qBAAU,WACNzH,GXAJ,SAACA,GACGA,EAAS,CAAEC,KCXS,iBDYpBe,IAAMiB,IAAI,YACLf,MAAK,SAACgB,GACHlC,EAAS,CACLC,KCXO,cDYPkB,QAASe,EAAIC,UAGpBf,OAAM,SAACC,GACJrB,EAAS,CACLC,KCjBO,cDkBPkB,QAAS,aWXtB,IAGC,oCACI,yBAAKvB,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mCACX,kBAAC,GAAD,OAEJ,yBAAKA,UAAU,YAaTiH,EAKE,kBAACe,EAAA,EAAD,MALSW,EAAQxE,KAAI,SAACH,EAAaK,GAAd,OACrB,kBAAC,EAAD,CACIK,IAAKV,EAAOzD,SACZ8D,MAAOA,YCwFxB0I,GApHA,WAEX,IAAI9F,GAAmB,EAFN,EAGuBzG,mBAAc,IAHrC,mBAGVwM,EAHU,KAGIC,EAHJ,OAI4DzH,cAArEE,EAJS,EAITA,SAAUC,EAJD,EAICA,aAAce,EAJf,EAIeA,OAAQwG,EAJvB,EAIuBA,SAAUC,EAJjC,EAIiCA,UAAWhN,EAJ5C,EAI4CA,YACvDC,EAAWQ,cACX6G,EAAU2F,cAqBVC,EAAItL,aAAY,SAACC,GAAD,OAAgBA,EAAM4D,MAQ5C,OALAiC,qBAAU,WAAO,IAAD,GACZ,UAAIwF,EAAE3G,cAAN,aAAI,EAAU4G,UACVL,EAAgBI,EAAE3G,UAEvB,CAAC2G,IAEA,kBAAC,WAAD,KACI,yBAAKrN,UAAU,OACX,yBAAKA,UAAU,QACf,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oBACX,wBAAIA,UAAU,uCAAd,YAEJ,yBAAKA,UAAU,IACX,0BAAM8F,SAAUH,GApCnB,SAACpD,GACd0E,GAAU,EACV7G,EJMkB,SAACmN,EAAkB9F,GAAnB,OACtB,SAACrH,GACGA,EAAS,CAAEC,KP3BO,eO4BlBe,IAAM6E,KAAK,UAAWsH,GACjBjM,MAAK,SAACgB,GACH+G,EAAuB/G,EAAIC,KAAK+G,OAChClJ,EAASqJ,KACTrJ,EAAS,CAAEC,KP9BC,iBO+BZoH,EAAQ+F,KAAK,QAEhBhM,OAAM,SAACkI,GACJtJ,EAAS,CACLC,KPtCM,aOuCNkB,QAASmI,EAAMxD,SAAS3D,WInB3BkL,CAAWlL,EAAMkF,OAkC8BzH,UAAU,eAC9C,2BAAOqG,KAAK,QAAQhG,KAAK,QACrBiG,YAAY,aACZoH,QAAQ,eACR3N,MAAM,4BACNC,UAAU,eACVwG,IAAKd,EAAS,CACVe,UAAU,EACVF,UAAW,OAEf,8DACHG,EAAOiH,OAAS,0BAAM3N,UAAU,kCAAhB,qBAEL,6BACZ,2BAAOqG,KAAK,WAAWhG,KAAK,WACxBL,UAAU,eAAesG,YAAY,WACrCE,IAAKd,EAAS,CACVe,UAAU,EACVmH,UAAW,EACXrH,UAAW,OAEnB,kEACCG,EAAOmH,UAAY,0BAAM7N,UAAU,kCAAhB,wBAER,6BACZ,2BAAOqG,KAAK,kBAAkBhG,KAAK,WAC/BL,UAAU,eAAesG,YAAY,kBACrCwH,OAAQ,SAACC,GAAD,OAzDd,SAACA,GACfA,IAAMZ,EAAU,YAChBD,EAAS,kBAAmB,CACxB7M,KAAM,WAIVF,EAAY,mBAkDuB6N,CAAcD,EAAE9B,OAAOgC,QACtCzH,IAAKd,EAAS,CACVe,UAAU,EACVmH,UAAW,EACXrH,UAAW,OAEnB,sDACCG,EAAOwH,iBACJ,0BAAMlO,UAAU,kCAAhB,sBAEQ,6BACZ,2BAAOqG,KAAK,SAAShG,KAAK,OACtBiG,YAAY,WAAWtG,UAAU,eACjCwG,IAAKd,EAAS,CACVe,UAAU,EACVF,UAAW,OAElBG,EAAOwB,QAAU,0BAAMlI,UAAU,kCAAhB,wBAEN,6BACXgN,GAAgB,0BAAMhN,UAAU,kCAC5BgN,EAAaM,SAGlB,yBAAKtN,UAAU,OACX,yBAAKA,UAAU,YACX,4BAAQA,UAAU,4BACdK,KAAK,UADT,UAEK4G,GAAY,kBAACe,EAAA,EAAD,CAAkBC,KAAM,OAG7C,yBAAKjI,UAAU,YACX,mDACA,kBAAC,IAAD,CAAM2C,GAAG,SAAS3C,UAAU,gBAA5B,iBAGR,gCAIZ,yBAAKA,UAAU,W,oBC9BhBmO,GApFD,WAEV,IAAIlH,GAAmB,EAFP,EAGwBzG,mBAAc,IAHtC,mBAGTwM,EAHS,KAGKC,EAHL,OAI2BzH,cAAnCE,EAJQ,EAIRA,SAAUC,EAJF,EAIEA,aAAce,EAJhB,EAIgBA,OAE1BtG,EAAWQ,cACX6G,EAAU2F,cASVC,EAAItL,aAAY,SAACC,GAAD,OAAgBA,EAAM4D,MAQ5C,OALAiC,qBAAU,WAAO,IAAD,GACZ,UAAIwF,EAAE3G,cAAN,aAAI,EAAU4G,UACVL,EAAgBI,EAAE3G,UAEvB,CAAC2G,IAEA,kBAAC,WAAD,KACI,yBAAKrN,UAAU,OACX,yBAAKA,UAAU,QACf,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,OAAO+E,IAAKqJ,KAAWtJ,IAAI,GAAGzB,MAAM,KAAKC,OAAO,OAC/D,wBAAItD,UAAU,uCAAd,YAEJ,yBAAKA,UAAU,IACX,0BAAM8F,SAAUH,GAzBnB,SAACpD,GACd0E,GAAU,EACV7G,ELXiB,SAACiO,EAAe5G,GAAhB,OACrB,SAACrH,GACGA,EAAS,CAAEC,KPRO,eOSlBe,IAAM6E,KAAK,SAAUoI,GAChB/M,MAAK,SAACgB,GACH+G,EAAuB/G,EAAIC,KAAK+G,OAChClJ,EAASqJ,KACTrJ,EAAS,CAAEC,KPXC,iBOYZoH,EAAQ+F,KAAK,QAEhBhM,OAAM,SAACkI,GACJtJ,EAAS,CACLC,KPnBM,aOoBNkB,QAASmI,EAAMxD,SAAS3D,WKF3B+L,CAAU/L,EAAMkF,OAuB+BzH,UAAU,eAC9C,2BAAOqG,KAAK,QAAQhG,KAAK,QACrBiG,YAAY,aAAatG,UAAU,eACnC0N,QAAQ,eACR3N,MAAM,4BACNyG,IAAKd,EAAS,CACVe,UAAU,EACVF,UAAW,OAEf,8DACHG,EAAOiH,OAAS,0BAAM3N,UAAU,kCAAhB,qBAEL,6BACZ,2BAAOqG,KAAK,WAAWhG,KAAK,WACxBL,UAAU,eAAesG,YAAY,WACrCE,IAAKd,EAAS,CACVe,UAAU,EACVmH,UAAW,EACXrH,UAAW,OAEf,kEACHG,EAAOmH,UAAY,0BAAM7N,UAAU,kCAAhB,wBAGpB,6BACCgN,GAAgB,0BAAMhN,UAAU,kCAC5BgN,EAAaM,SAElB,yBAAKtN,UAAU,OACX,yBAAKA,UAAU,YACX,4BAAQA,UAAU,4BACdK,KAAK,UADT,QAEK4G,GAAY,kBAACe,EAAA,EAAD,CAAkBnH,MAAM,YAAYoH,KAAM,OAG/D,yBAAKjI,UAAU,YACX,yDACA,kBAAC,IAAD,CAAM2C,GAAG,UAAU3C,UAAU,gBAA7B,mBAGR,gCAIZ,yBAAKA,UAAU,W,wCCmBhBuO,GA1FI,WAAO,IAAD,EAEG/N,oBAAS,GAFZ,mBAEdC,EAFc,KAERC,EAFQ,OAGc8E,cAA3BE,EAHa,EAGbA,SAAUC,EAHG,EAGHA,aAEZvF,EAAWQ,cAEXqG,EAAUlF,aAAY,SAACC,GAAD,OAAgBA,EAAM4D,GAAGqB,WAO/CtG,EAAc,WAChBD,GAAQ,IAQZ,OACI,kBAAC,WAAD,KACI,kBAAC,EAAD,CAAUhB,QAfC,WACfgB,GAAQ,IAc2Bf,IAAI,iBAC/B,kBAAC,KAAD,CAAekB,MAAM,aAEzB,kBAACC,EAAA,EAAD,CACIL,KAAMA,EACNM,QAASJ,EACTK,WAAS,EACTC,SAAS,MAGT,kBAACC,EAAA,EAAD,4BACA,kBAACoH,EAAA,EAAD,KACI,0BAAMxC,SAAUH,GAnBf,SAAC6I,Gd2FI,IAACC,Ec1FnBrO,Gd0FmBqO,Ec1FCD,Ed0FkB,SAACpO,GAC3CA,EAAS,CACLC,KC5HkB,eD8HtBe,IAAM6E,KAAK,UAAWwI,GACjBnN,MAAK,SAACgB,GACHlC,EAAS,CACLC,KCvHW,cDwHXkB,QAASe,EAAIC,OAEjBnC,EAASD,QAEZqB,OAAM,SAACC,GACJrB,EAAS,CACLC,KCzIU,aD0IVkB,QAASE,EAAIyE,SAAS3D,acxG9B7B,GAAQ,MAiB4CV,UAAU,eAC9C,8BAAUoG,KAAM,EAAGC,KAAK,OACpBC,YAAY,yBACZtG,UAAU,eACVuG,UAAW,IACXC,IAAKd,EAAS,CACVe,UAAU,EACVF,UAAW,QACT,6BAsBV,4BAAQ7G,QAASiB,EACbN,KAAK,SACLL,UAAU,gBAFd,UAKA,4BAAQK,KAAK,SACTL,UAAU,6BACV0O,SAAUzH,GAFd,SAIKA,GACG,kBAACe,EAAA,EAAD,CACIhI,UAAU,kBACViI,KAAM,W,wCCS3B0G,GA3FO,WAGlB,IAAMvO,EAAWQ,cAHO,EAKEJ,mBAAc,CACpCoO,SAAU,OANU,mBAKjBC,EALiB,KAKVC,EALU,KASlBC,EAAgBhN,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAK8M,iBAKvDpO,EAAc,WAChBmO,EAAS,CAAEF,SAAU,QAUzBxJ,IAAMqD,OAAOC,KACb,IAAIsG,EAAoB,kBAAC,KAAD,MACxB,GAAID,GAAiBA,EAAcE,OAAS,EAAG,CAC3C,IAAIC,EAAWH,EAAcI,QAAO,SAACC,GAAD,OAA2B,IAAbA,EAAIC,QAClDC,EAAI,kBAAClE,GAAA,EAAD,CAAOmE,aAAcL,EAASD,OAAQpO,MAAM,aAAY,kBAAC,KAAD,OAE5DmO,EADJE,EAASD,OAAS,EACMK,EAAwB,kBAAC,KAAD,WAEhDN,EAAoB,kBAAC,KAAD,MAIxB,IAAIQ,EACAT,GAAiBA,EAAcE,OAAS,EACpCF,EAAc5K,KAAI,SAACiL,GACf,IAAMK,EAAoB,SAAbL,EAAI/O,KAAkB,QAAU,eACvCqP,EAAOtK,IAAMgK,EAAI7K,WAAWuE,UAC5B6G,EAAYP,EAAIC,KAAO,UAAY,YACnCO,EACW,SAAbR,EAAI/O,KACA,kBAAC,IAAD,CAAcQ,MAAO8O,EAAW9J,MAAO,CAAEgK,YAAa,MAElD,kBAAC,IAAD,CAAUhP,MAAO8O,EAAW9J,MAAO,CAAEgK,YAAa,MAG9D,OACI,kBAACC,GAAA,EAAD,CAAUpL,IAAK0K,EAAI7K,UAAW7E,QAASiB,GAClCiP,EACD,kBAAC5K,EAAA,EAAD,CACIE,UAAWC,IAEXF,QAAQ,QACRtC,GAAE,iBAAYyM,EAAIW,UAAhB,mBAAoCX,EAAI7O,WAEzC6O,EAAIY,OANT,IAMkBP,EANlB,gBAMqCC,OAM7C,kBAACI,GAAA,EAAD,CAAUpQ,QAASiB,GAAnB,iCAIZ,OACI,kBAAC,WAAD,KACI,kBAACb,EAAA,EAAD,CAASG,UAAU,MAAMF,MAAM,iBAC3B,kBAACG,EAAA,EAAD,CACI+P,YAAWpB,EAAMD,SAAW,mBAAgBsB,EAC5CC,gBAAc,OACdzQ,QAAS,SAACqO,GA/DtBe,EAAS,CAAEF,SA+D4Bb,EA/DZ9B,WAiEd+C,IAGT,kBAACoB,GAAA,EAAD,CACIxB,SAAUC,EAAMD,SAChBnO,KAAM4P,QAAQxB,EAAMD,UACpB7N,QAASJ,EACT2P,UAnES,WACjB,IP4D8BC,EO5D1BC,EAAyBzB,EACxBI,QAAO,SAACC,GAAD,OAAeA,EAAIC,QAC1BlL,KAAI,SAACiL,GAAD,OAAcA,EAAIqB,kBACvBD,EAAuBvB,OAAS,GAChC7O,GPwD0BmQ,EOxDKC,EPwDqB,SAACpQ,GAC7DgB,IAAM6E,KAAK,kBAAmBsK,GAC7BjP,MAAK,WACFlB,EAAS,CACLC,KP/F2B,+BOkGlCmB,OAAM,SAACC,GAAD,OAAcC,QAAQC,IAAIF,WOCpB+N,K,oBCnDFkB,GAtCA,WAGX,IAAM5O,EAAgBC,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAKH,iBAE7D,OACI,kBAAC,WAAD,KACI,kBAAC6O,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAS5Q,UAAU,iBACd8B,EACG,kBAAC,WAAD,KACI,kBAAC,GAAD,MACA,kBAAC,IAAD,CAAMa,GAAG,KACL,kBAAC,EAAD,CAAUhD,IAAI,QACV,kBAAC,KAAD,CAAUkB,MAAM,aAGxB,kBAAC,GAAD,OAGA,kBAAC,WAAD,KACI,kBAAC0H,EAAA,EAAD,CAAQ1H,MAAM,UAAUqE,UAAWC,IAAMxC,GAAG,UAA5C,SAGA,kBAAC4F,EAAA,EAAD,CAAQ1H,MAAM,UAAUqE,UAAWC,IAAMxC,GAAG,KAA5C,QAGA,kBAAC4F,EAAA,EAAD,CAAQ1H,MAAM,UAAUqE,UAAWC,IAAMxC,GAAG,WAA5C,eCpBjBkO,GAfG,SAAC,GAA2C,IAA9BC,EAA6B,EAAxC5L,UAAsB6L,EAAkB,EAAlBA,KAGnCjP,EAAgBC,aAAY,SAACC,GAAD,QAAgBA,EAAMC,KAAKH,iBAE7D,OACE,kBAAC,IAAD,iBACMiP,EADN,CAEE7L,UAAW,SAAC0B,GAAD,OAAkC,IAAlB9E,EAAyB,kBAAC,IAAD,CAAUa,GAAG,MAAS,kBAACmO,EAAclK,Q,8CCLzFoK,GAAe,CACjBlP,eAAe,EACfmF,SAAS,EACTE,YAAa,GACbjF,MAAO,GACP6M,cAAe,ICJbiC,GAAe,CACjBrI,QAAS,GACT3E,OAAQ,GACRiD,SAAS,GCZP+J,GAAe,CACjB/J,SAAS,EACTP,OAAQ,MCQNuK,GAAa,CAACC,MACdC,GAAWC,aAAgB,CAC7BnP,KHIuB,WAA6C,IAA5C4M,EAA2C,uDAA9BmC,GAAcK,EAAgB,uCAGnE,OAAQA,EAAOhR,MACX,IjBrByB,qBiBsBrB,OAAO,6BACAwO,GADP,IAEI/M,eAAe,IAEvB,IjBzB0B,uBiB0BtB,OAAOkP,GACX,IjB1BgB,WiB2BZ,OAAO,cACHlP,eAAe,EACfmF,SAAS,GACNoK,EAAO9P,SAElB,IjB/BoB,eiBgChB,OAAO,6BACAsN,GADP,IAEI5H,SAAS,IAEjB,IjBzBmB,ciB0Bf,OAAO,6BACA4H,GADP,IAEI3M,MAAM,GAAD,oBACE2M,EAAM3M,OADR,CAED,CACIuC,WAAYoK,EAAM1H,YAAYe,OAC9B3H,SAAU8Q,EAAO9P,QAAQhB,cAIzC,IjBnCqB,gBiBoCjB,OAAO,6BACAsO,GADP,IAEI3M,MAAO2M,EAAM3M,MAAMiN,QACf,SAAC/M,GAAD,OAAeA,EAAK7B,WAAa8Q,EAAO9P,QAAQhB,cAG5D,IjBrD+B,0BiBuD3B,OADAsO,EAAME,cAAcuC,SAAQ,SAAClC,GAAD,OAAcA,EAAIC,MAAO,KAC9C,gBACAR,GAEX,QACI,OAAOA,IGjDftM,KFCuB,WAA6C,IAA5CsM,EAA2C,uDAA9BmC,GAAcK,EAAgB,uCAEnE,OAAQA,EAAOhR,MACX,IlBVoB,ekBWhB,OAAO,6BACAwO,GADP,IAEI5H,SAAS,IAEjB,IlBXmB,ckBYf,OAAO,6BACA4H,GADP,IAEIlG,QAAS0I,EAAO9P,UAExB,IlBfkB,akBgBd,OAAO,6BACAsN,GADP,IAEI7K,OAAQqN,EAAO9P,UAEvB,IlBnBmB,ckBoBnB,IlBnBqB,gBkBqBjB,IAAI8C,EAAQwK,EAAMlG,QAAQ4I,WACtB,SAACvN,GAAD,OAAiBA,EAAOzD,WAAa8Q,EAAO9P,QAAQhB,YAWxD,OATAsO,EAAMlG,QAAQtE,GAASgN,EAAO9P,QAE1BsN,EAAM7K,OAAOzD,WAAa8Q,EAAO9P,QAAQhB,WAEzCsO,EAAM7K,OAAN,6BACO6K,EAAM7K,QADb,IAEImE,UAAWkJ,EAAO9P,QAAQ4G,aAG3B,gBACA0G,GAGX,IlBpCqB,gBkBqCjB,IAAI2C,EAAc3C,EAAMlG,QAAQ4I,WAC5B,SAACvN,GAAD,OAAiBA,EAAOzD,WAAa8Q,EAAO9P,WAGhD,OADAsN,EAAMlG,QAAQ8I,OAAOD,EAAa,GAC3B,gBACA3C,GAEX,IlB3CmB,ckB4Cf,OAAO,6BACAA,GADP,IAEIlG,QAAQ,CACJ0I,EAAO9P,SADJ,oBAEAsN,EAAMlG,YAGrB,IlBlDsB,iBkBoDlB,IAAI+I,EAAe7C,EAAMlG,QAAQ4I,WAC7B,SAACvN,GAAD,OAAiBA,EAAOzD,WAAa8Q,EAAO9P,QAAQhB,YAgBxD,OAbAsO,EAAMlG,QAAQ+I,GAAd,6BACO7C,EAAMlG,QAAQ+I,IADrB,IAEItJ,aAAeyG,EAAM7K,OAAOoE,aAAe,IAG/CyG,EAAM7K,OAAN,6BACO6K,EAAM7K,QADb,IAEIoE,aAAeyG,EAAM7K,OAAOoE,aAAe,EAC3CrE,SAAS,CACLsN,EAAO9P,SADH,oBAEDsN,EAAM7K,OAAOD,aAGjB,gBACA8K,GAEX,QACI,OAAOA,IE5EfjJ,GDTqB,WAAuC,IAAtCiJ,EAAqC,uDAA7BmC,GAAcK,EAAe,uCAC3D,OAAQA,EAAOhR,MACX,InBFkB,amBGd,OAAO,6BACAwO,GADP,IAEI5H,SAAS,EACTP,OAAQ2K,EAAO9P,UAEvB,InBLoB,emBMhB,OAAO,6BACAsN,GADP,IAEI5H,SAAS,EACTP,OAAQ,OAEhB,InBbkB,amBcd,OAAO,6BACAmI,GADP,IAEI5H,SAAS,IAEb,InBfmB,kBmBgBf,OAAO,6BACA4H,GADP,IAEI5H,SAAS,IAErB,QACI,OAAO4H,MCRJ7M,GALD2P,aAAYR,GARL,GASjBS,aAAQC,KAAe,WAAf,EAAmBZ,M,UCTzB9G,GAAcC,cAAW,SAACtH,GAAD,OAC3BC,YAAa,CACTsH,MAAO,CACHC,gBAAiB,UACjBzJ,MAAO,UACP0J,UAAU,aAAD,OAAezH,EAAM0H,QAAQC,WAAWC,OACjD,WAAY,CACRC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNxH,MAAO,OACPC,OAAQ,OACRwH,aAAc,MACdC,UAAW,oCACXC,OAAQ,yBACRC,QAAS,OAGjB,oBAAqB,CACjB,KAAM,CACFC,UAAW,YACXC,QAAS,GAEb,OAAQ,CACJD,UAAW,aACXC,QAAS,QAzBLf,CA6BlBgB,MACIxI,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,QAAS,OACT,QAAS,CACLC,OAAQJ,EAAMK,QAAQ,KAG9BI,MAAO,CACHF,MAAOP,EAAMK,QAAQ,IACrBG,OAAQR,EAAMK,QAAQ,UAqEnB2O,GAxDO,SAAClL,GACnB,IAAM9C,EAAUlB,KAD+B,EAEiBgE,EAAMmL,QAA9D7J,EAFuC,EAEvCA,OAAQ3D,EAF+B,EAE/BA,UAAWqH,EAFoB,EAEpBA,SAAUhC,EAFU,EAEVA,IAAKC,EAFK,EAELA,QAASzC,EAFJ,EAEIA,SAEnD,OACI,kBAACmE,GAAA,EAAD,CAAOvL,UAAU,SACb,yBAAKA,UAAU,IACX,yBAAKA,UAAU,iBACX,kBAAC,GAAD,CACIwL,QAAQ,SACRC,aAAc,CACVC,SAAU,SACVC,WAAY,SAEhB1G,QAAQ,OAER,kBAACJ,EAAA,EAAD,CACIE,IAAK6G,EAAU9G,IAAI,UACnB9E,UAAW8D,EAAQP,UAG/B,yBAAKvD,UAAU,mBACX,kBAAC,KAAD,CACIkF,UAAWC,IACXxC,GAAE,iBAAYuF,GACdjD,QAAQ,MAHZ,IAKMiD,GAEN,6BACC0B,GAAO,kBAAC5E,EAAA,EAAD,CAAYC,QAAQ,SAAS2E,GACrC,6BACCxC,GACG,kBAAC,WAAD,KACI,kBAAC,IAAD,CAAYvG,MAAM,YADtB,IACmC,8BAAOuG,GACtC,8BAGPyC,GACG,kBAAC,WAAD,KACI,kBAAC,KAAD,CAAUhJ,MAAM,YAChB,uBAAG8L,KAAM9C,EAASoC,OAAO,SAASW,IAAI,uBACjC,IACA/C,GAEL,8BAGR,kBAAC,KAAD,CAAehJ,MAAM,YAAa,IAClC,wCAAcuE,IAAMb,GAAWc,OAAO,aAAmB,iCCtC9D2M,GA/DF,WAAO,IAAD,EAEexR,mBAAS,MAFxB,mBAERuR,EAFQ,KAECE,EAFD,OAI6BC,cAApCC,EAJO,EAIPA,YAAaC,EAJN,EAIMA,cAEfnL,EAAUlF,aAAY,SAACC,GAAD,OAAgBA,EAAM4D,GAAGqB,WAC/C0B,EAAU5G,aAAY,SAACC,GAAD,OAAgBA,EAAMO,KAAKoG,WAGjD0J,EAAgBpL,EAElB,kBAACe,EAAA,EAAD,MACY,OAAZW,EACA,6DACkBuH,IAAlBkC,EACAzJ,EAAQxE,KAAI,SAACH,EAAaK,GACtB,GAAIL,EAAOS,aAAe0N,EACtB,OAAO,kBAAC,EAAD,CAAQzN,IAAKV,EAAOzD,SAAU8D,MAAOA,OAGxCsE,EAAQxE,KAAI,SAACH,EAAaK,GACtB,OAAIL,EAAOzD,WAAa6R,EAIZ,kBAAC,EAAD,CAAQ1N,IAAKV,EAAOzD,SAAU8D,MAAOA,EAAOyD,YAAU,IAH1D9D,EAAOS,aAAe0N,EACf,kBAAC,EAAD,CAAQzN,IAAKV,EAAOzD,SAAU8D,MAAOA,SADhD,KAkBxB,OAXAwD,qBAAU,WACNzG,IAAMiB,IAAN,gBAAmB8P,IACd7Q,MAAK,SAACgB,GACH2P,EAAW3P,EAAIC,KAAKN,SAEvBT,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAGrB,CAAC0Q,IAGA,oCACI,yBAAKnS,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,kCACE,OAAZ+R,EAEG,kBAAC/J,EAAA,EAAD,MAEI,kBAAC,GAAD,CAAe+J,QAASA,KAGpC,yBAAK/R,UAAU,YACVqS,OC3CnB/I,GAAQN,aAAaQ,QAAQ,SAE/BF,KAEoB,IADGgJ,aAAWhJ,IACpBiJ,IAAaC,KAAKC,MAGhCzQ,GAAM5B,SAAS2I,MAGf/G,GAAM5B,SAAS,CAACC,KvBhCa,uBuBiC7Be,IAAM8H,SAASC,QAAQC,OAAvB,cAAiDE,GACjDtH,GAAM5B,SAASqJ,OAkCJiJ,OA3Bf,WACE,OAEE,kBAAC,IAAD,CAAU1Q,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,GAAD,MACA,yBAAKhC,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2S,OAAK,EAACC,KAAK,IAAI1N,UAAW2N,KACjC,kBAAC,GAAD,CAAWD,KAAK,SAAS1N,UAAW4N,KACpC,kBAAC,GAAD,CAAWF,KAAK,UAAU1N,UAAW6N,KACrC,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,sBAAsB1N,UAAW8M,KACnD,kBAAC,IAAD,CACMW,OAAK,EACLC,KAAK,4CACL1N,UAAW8M,UCrD7BgB,IAASC,OACL,kBAAC,GAAD,MACFzG,SAASC,eAAe,U,mBCN1ByG,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.32a62890.chunk.js","sourcesContent":["import React from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\ninterface Props {\r\n    children: any, \r\n    onClick?: () => void, \r\n    tip: string, \r\n    btnClassName?: string, \r\n    tipClassName?: string\r\n    \r\n  }\r\n\r\nexport const MyButton = ({children, onClick, tip, btnClassName, tipClassName}: Props) => {\r\n    return (\r\n        <Tooltip title={tip} className={tipClassName} placement=\"top\">\r\n            <IconButton onClick={onClick} className={btnClassName}>\r\n                {children}\r\n            </IconButton>\r\n        </Tooltip>\r\n    )\r\n}\r\n","\r\nimport {\r\n    SET_SCREAM,\r\n    LOADING_DATA,\r\n    LIKE_SCREAM,\r\n    UNLIKE_SCREAM,\r\n    SET_SCREAMS,\r\n    LOADING_UI,\r\n    STOP_LOADING_UI,\r\n    DELETE_SCREAM,\r\n    POST_SCREAM,\r\n    SET_ERRORS,\r\n    CLEAR_ERRORS,\r\n    SUBMIT_COMMENT\r\n} from '../types';\r\nimport axios from 'axios';\r\n\r\n// get all screams\r\nexport const getScreams = () =>\r\n    (dispatch: any) => {\r\n        dispatch({ type: LOADING_DATA });\r\n        axios.get(\"/screams\")\r\n            .then((res: any) => {\r\n                dispatch({\r\n                    type: SET_SCREAMS,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .catch((err: any) => {\r\n                dispatch({\r\n                    type: SET_SCREAMS,\r\n                    payload: []\r\n                });\r\n            })\r\n    }\r\n// get a scream for id\r\nexport const getScream = (screamId: string) => (dispatch: any) => {\r\n    //dispatch({ type: LOADING_UI });\r\n    axios\r\n        .get(`/scream/${screamId}`)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: SET_SCREAM,\r\n                payload: res.data\r\n            });\r\n            //dispatch({ type: STOP_LOADING_UI });\r\n        })\r\n        .catch((err) => console.log(err));\r\n};\r\n// like a screams \r\nexport const likeScream = (screamId: string) =>\r\n    (dispatch: any) => {\r\n        axios.get(`/scream/${screamId}/like`)\r\n            .then((res: any) => {\r\n                dispatch({\r\n                    type: LIKE_SCREAM,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch((err: any) => {\r\n                // dispatch({\r\n                //     type: \r\n                // })\r\n            })\r\n    }\r\n// unlike a screams\r\nexport const unlikeScream = (screamId: string) => (dispatch: any) => {\r\n        axios.get(`/scream/${screamId}/unlike`)\r\n            .then((res: any) => {\r\n                dispatch({\r\n                    type: UNLIKE_SCREAM,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch((err: any) => {\r\n                // dispatch({\r\n                //     type: \r\n                // })\r\n            })\r\n    };\r\n// submit comment\r\nexport const submitComment = (screamId: any, commentData: any) => (dispatch: any) => {\r\n    axios.post(`/scream/${screamId}/comment`, commentData)\r\n        .then((res: any) => {\r\n            dispatch({\r\n                type: SUBMIT_COMMENT,\r\n                payload: res.data\r\n            })\r\n            dispatch(clearErrors())\r\n        })\r\n        .catch((err: any) => {\r\n            dispatch({\r\n                type: SET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        })\r\n}\r\n// delete scream\r\nexport const deleteScream = (screamId: string) => (dispatch: any) => {\r\n    dispatch({\r\n        type: LOADING_UI\r\n    })\r\n    axios.delete(`/scream/${screamId}`)\r\n        .then(() => {\r\n            dispatch({\r\n                type: DELETE_SCREAM,\r\n                payload: screamId\r\n            })\r\n            dispatch(clearErrors());\r\n        })\r\n        .catch((err: any) => console.log(err))\r\n}\r\n// get user data\r\nexport const getUserData = (userHanle: string) => (dispatch: any) => {\r\n    dispatch({ type: LOADING_DATA });\r\n    axios.get(`/user/${userHanle}`)\r\n        .then((res: any) => {\r\n            dispatch({\r\n                type: SET_SCREAMS,\r\n                payload: res.data.screams\r\n            })\r\n        })\r\n        .catch((err: any) => {\r\n            dispatch({\r\n                type: SET_SCREAMS,\r\n                payload: null\r\n            })\r\n        })\r\n}\r\n// post a scream\r\nexport const postScream = (newScream: any) => (dispatch: any) => {\r\n    dispatch({\r\n        type: LOADING_UI\r\n    })\r\n    axios.post('/scream', newScream)\r\n        .then((res: any) => {\r\n            dispatch({\r\n                type: POST_SCREAM,\r\n                payload: res.data\r\n            });\r\n            dispatch(clearErrors());\r\n        })\r\n        .catch((err: any) => {\r\n            dispatch({\r\n                type: SET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        })\r\n}\r\n\r\n// clear errors\r\nexport const clearErrors = () => (dispatch: any) => {\r\n    dispatch({\r\n        type: CLEAR_ERRORS\r\n    })\r\n}","// user reducer types\r\nexport const SET_AUTHENTICATED = 'SET_AUTHENTICATED ';\r\nexport const SET_UNAUTHENTICATED ='SET_UNAUTHENTICATED ';\r\nexport const SET_USER = 'SET_USER';\r\nexport const LOADING_USER = 'LOADING_USER';\r\nexport const MARK_NOTIFICATIONS_READ = 'MARK_NOTIFICATIONS_READ';\r\n// ui reducer types\r\nexport const SET_ERRORS = 'SET_ERRORS';\r\nexport const LOADING_UI = 'LOADING_UI';\r\nexport const LOADING_DATA = 'LOADING_DATA';\r\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\r\nexport const STOP_LOADING_UI = 'STOP_LOADING_UI';\r\n// data reducer types\r\nexport const SET_SCREAMS = 'SET_SCREAMS';\r\nexport const SET_SCREAM = 'SET_SCREAM';\r\nexport const LIKE_SCREAM = 'LIKE_SCREAM';\r\nexport const UNLIKE_SCREAM = 'UNLIKE_SCREAM';\r\nexport const DELETE_SCREAM = 'DELETE_SCREAM';\r\nexport const POST_SCREAM = 'POST_SCREAM';\r\nexport const SUBMIT_COMMENT = 'SUBMIT_COMMENT';","import React, { useState, Fragment } from 'react'\r\n// MUI Stuff\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\n// Redux\r\nimport { deleteScream } from '../redux/actions/dataActions';\r\nimport { MyButton } from '../util/MyButton';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst DeletScream = ({ screamId }: any) => {\r\n\r\n    // state\r\n    const [open, setOpen] = useState(false);\r\n    // open dialog\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    // close dialog\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    // necessary for the Reducer\r\n    const dispatch = useDispatch();\r\n\r\n    // handle delete scream\r\n    const deleteCurrentScream = () => {\r\n        dispatch(deleteScream(screamId));\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <MyButton\r\n                tip=\"Delete scream\"\r\n                onClick={handleOpen}\r\n            >\r\n                <DeleteOutline color=\"secondary\"></DeleteOutline>\r\n            </MyButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n            >\r\n                <DialogTitle>\r\n                    Are you sure you want to delete this scream ?\r\n          </DialogTitle>\r\n                <DialogActions>\r\n                    <button onClick={handleClose}\r\n                        type=\"button\"\r\n                        className=\"btn btn-link \">\r\n                        Cancel\r\n                            </button>\r\n                    <button onClick={deleteCurrentScream}\r\n                        type=\"button\"\r\n                        className=\"btn btn-login btn-primary \" >\r\n                        Delete\r\n                            </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default DeletScream\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { MyButton } from '../util/MyButton';\r\nimport { Link } from 'react-router-dom';\r\nimport { FavoriteBorder } from '@material-ui/icons';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport { likeScream, unlikeScream } from '../redux/actions/dataActions';\r\n\r\nconst LikeButton = ({screamId}: any) => {\r\n\r\n    // get auth\r\n    const authenticated = useSelector((store: any) => store.user.authenticated);\r\n    // need for Reducer\r\n    const dispatch = useDispatch();\r\n    // get user to access likes and credentials\r\n    let user: any = useSelector((store: any) => store.user);\r\n    // check and set liked scream\r\n    const likedScream = () => {\r\n        if (user.likes && user.likes.find(\r\n            (like: any) => like.screamId === screamId\r\n        ))\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n    // unlike scream\r\n    const likeCurrentScream = () => {\r\n        dispatch(likeScream(screamId));\r\n    }\r\n    // unlike scream\r\n    const unlikeCurrentScream = () => {\r\n        dispatch(unlikeScream(screamId));\r\n    }\r\n\r\n    // like button\r\n    const likesButton = !authenticated ?\r\n        (\r\n            <MyButton tip=\"Like\">\r\n                <Link to=\"/login\">\r\n                    <FavoriteBorder color=\"secondary\"></FavoriteBorder>\r\n                </Link>\r\n            </MyButton>\r\n        ) :\r\n        (\r\n            likedScream() ?\r\n                (\r\n                    <MyButton tip=\"Undo like\" onClick={unlikeCurrentScream}>\r\n                        <FavoriteIcon color=\"secondary\"></FavoriteIcon>\r\n                    </MyButton>\r\n                )\r\n                :\r\n                (\r\n                    <MyButton tip=\"Like\" onClick={likeCurrentScream}>\r\n                        <FavoriteBorder color=\"secondary\"></FavoriteBorder >\r\n                    </MyButton>\r\n                )\r\n        )\r\n\r\n    return likesButton\r\n    \r\n}\r\n\r\nexport default LikeButton\r\n","import React, { Fragment } from 'react'\r\n// Redux\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n// Material\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\n// Days JS\r\nimport dayjs from 'dayjs';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n            },\r\n        },\r\n        small: {\r\n            width: theme.spacing(3),\r\n            height: theme.spacing(3),\r\n        },\r\n        large: {\r\n            width: theme.spacing(7),\r\n            height: theme.spacing(7),\r\n        },\r\n        leftText: {\r\n            textAlign: \"left\"\r\n        },\r\n        rightText: {\r\n            // textAlign: \"right\"\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\"\r\n        }\r\n\r\n    }),\r\n);\r\n\r\nconst Comments = ({ id }: any) => {\r\n\r\n    const classes = useStyles();\r\n    // get data from store\r\n    const comments = useSelector((store: any) => store.data.scream.comments);\r\n\r\n    return (\r\n        <Grid container>\r\n            {comments && comments.map((comment: any, index: number) => {\r\n                const { body, createdAt, userImage, userHandle } = comment;\r\n                return (\r\n                    <Fragment key={createdAt}>\r\n                        <Grid item sm={12}>\r\n                            <Grid container>\r\n                                <Grid item sm={2}>\r\n                                    <Avatar alt=\"comment-image\"\r\n                                        src={userImage}\r\n                                        className={classes.large} />\r\n                                </Grid>\r\n                                <Grid item sm={10} >\r\n                                    <div className=\"comment-data\" >\r\n                                        <Typography\r\n                                            variant=\"h6\"\r\n                                            component={Link}\r\n                                            to={`/users/${userHandle}`}\r\n                                            color=\"primary\"\r\n                                            display=\"inline\"\r\n                                        >\r\n                                            {userHandle}\r\n                                        </Typography>\r\n                                        <Typography\r\n                                            variant=\"body2\"\r\n                                            color=\"textSecondary\"\r\n                                            display=\"inline\"\r\n                                        >\r\n                                            &nbsp;&nbsp;-&nbsp;{dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}\r\n                                        </Typography>\r\n                                        <Typography variant=\"body1\">\r\n                                            {body}\r\n                                        </Typography>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Divider variant=\"inset\" />\r\n                        </Grid>\r\n                    </Fragment>\r\n                )\r\n            })}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Comments\r\n","import React from 'react'\r\nimport { useForm } from 'react-hook-form';\r\n// Redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { submitComment } from '../redux/actions/dataActions';\r\n// Material\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Button } from '@material-ui/core';\r\n\r\ntype Inputs = {\r\n    body: string\r\n};\r\n\r\nconst CommentForm = ({ screamId }: any) => {\r\n\r\n    // comment form\r\n    const { reset, register, handleSubmit } = useForm<Inputs>();\r\n    // necessary for the Reducer\r\n    const dispatch = useDispatch();\r\n    const UI = useSelector((store: any) => store.UI);\r\n    const authenticated = useSelector((store: any) => store.user.authenticated);\r\n\r\n    // handle onSubmit\r\n    const onSubmit = (newComment: Inputs) => {\r\n        dispatch(submitComment(screamId, newComment));\r\n        reset();\r\n    };\r\n\r\n    // comment form markup\r\n    const commentForm = authenticated ? (\r\n        <div style={{ textAlign: 'center' }}>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <textarea rows={2} name=\"body\"\r\n                    placeholder=\"Comment on scream\"\r\n                    className=\"form-control\"\r\n                    maxLength={100}\r\n                    ref={register({\r\n                        required: true,\r\n                        maxLength: 100\r\n                    })} />\r\n                {UI.errors?.comment && (<span className=\"text-danger text-small d-block\">\r\n                    {UI.errors?.comment}</span>)}\r\n                {/* <Button\r\n                    type=\"submit\"\r\n                    color=\"primary\"\r\n                    className=\"\"\r\n                >\r\n                    Submit\r\n          </Button> */}\r\n                <div className=\"py-1\">\r\n                    <button className=\"btn btn-login btn-primary \"\r\n                        type=\"submit\" >Submit\r\n                </button>\r\n                </div>\r\n            </form>\r\n            <hr className=\"visible-separator\" />\r\n        </div>\r\n    ) : null;\r\n    return commentForm;\r\n}\r\nexport default CommentForm\r\n","import React, { Fragment, useEffect, useState } from 'react'\r\nimport { Link, useLocation } from 'react-router-dom';\r\n// Material\r\nimport {\r\n    CircularProgress,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport { MyButton } from '../util/MyButton';\r\n// dayjs\r\nimport dayjs from 'dayjs';\r\n// icon\r\nimport { UnfoldMore } from '@material-ui/icons';\r\n// Redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport LikeButton from './LikeButton';\r\nimport Comments from './Comments';\r\nimport { getScream, clearErrors } from '../redux/actions/dataActions';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport CommentForm from './CommentForm';\r\n\r\nconst ScreamDialog = (props: { scream: any, openDialog?: boolean }) => {\r\n\r\n    const scream = props.scream;\r\n    // set state open\r\n    const [open, setOpen] = useState(false);\r\n    const { userHandle, screamId } = scream;\r\n    // set state windows url\r\n    const [url, setUrl] = useState({\r\n        oldPath: '',\r\n        newPath: ''\r\n    });\r\n    // get data from store\r\n    const loading = useSelector((store: any) => store.UI.loading);\r\n    const userCredentials = useSelector((store: any) => store.user.credentials);\r\n    // necessary for Reducer\r\n    const dispatch = useDispatch();\r\n    // necessary for URL\r\n    const location = useLocation();\r\n    // handleOpen dialog\r\n    const handleOpen = () => {\r\n        let oldPath = '/#' + location.pathname;\r\n        const newPath = `/#/users/${userHandle}/scream/${screamId}`;\r\n\r\n        // si son iguales es porque entro por las notificaciones, se modifica entonces\r\n        if (oldPath === newPath) {\r\n            oldPath = `/#/users/${userHandle}`;\r\n        }\r\n        window.history.pushState(null, '', newPath);\r\n        setUrl({ oldPath, newPath });\r\n        setOpen(true);\r\n        dispatch(getScream(scream.screamId));\r\n    }\r\n\r\n    // handleClose dialog\r\n    const handleClose = () => {\r\n        let urlCorrect = url.oldPath;\r\n        if (url.oldPath === '/#/')\r\n            urlCorrect = '/';\r\n        else\r\n            urlCorrect = `/#/users/${userHandle}`;\r\n        window.history.pushState(null, '', urlCorrect);\r\n        setOpen(false);\r\n        dispatch(clearErrors());\r\n    }\r\n\r\n    // open dialog depend of props.openDialog\r\n    useEffect(() => {\r\n        if (props.openDialog) {\r\n            handleOpen();\r\n        }\r\n    }, [location])\r\n\r\n    // set dialog mark up\r\n    const dialogMarkUp = loading ?\r\n        (\r\n            <CircularProgress size={200} />\r\n        ) : (\r\n\r\n            <>\r\n                {/* <div className=\"container container-margin\"> */}\r\n                <div className=\"row py-1\">\r\n                    <div className=\"col-md-5\">\r\n                        <img src={scream.userImage} alt=\"Profile\" className=\"profile-image\" />\r\n                    </div>\r\n                    <div className=\"col-md-7\">\r\n                        <Typography\r\n                            component={Link}\r\n                            color=\"primary\"\r\n                            variant=\"h5\"\r\n                            to={`/users/${userCredentials.handle}`}\r\n                        >\r\n                            @{userCredentials.handle}\r\n                        </Typography>\r\n                        <hr className=\"invisible-separator\" />\r\n                        <Typography variant=\"body2\" color=\"secondary\">\r\n                            {dayjs(userCredentials.createdAt).format('h:mm a, MMM DD YYYY')}\r\n                        </Typography>\r\n                        <hr className=\"invisible-separator\" />\r\n                        <Typography variant=\"body1\" >\r\n                            {scream.body}\r\n                        </Typography>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-5\">\r\n                                <LikeButton screamId={scream.screamId} />\r\n                                Likes: {scream.likeCount}\r\n\r\n                            </div>\r\n                            <div className=\"col-md-7\">\r\n                                <MyButton tip=\"Comments\">\r\n                                    <ChatIcon color=\"secondary\" />\r\n                                </MyButton>\r\n                            Comments: {scream.commentCount}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <CommentForm screamId={scream.screamId} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <Comments id={scream.screamId} />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    return (\r\n        <Fragment>\r\n            <MyButton onClick={handleOpen} tip=\"Expand scream\" >\r\n                <UnfoldMore color=\"secondary\" />\r\n            </MyButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                fullWidth\r\n                maxWidth=\"sm\">\r\n                <DialogContent className=\"dialog-content\">\r\n                    {dialogMarkUp}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={(handleClose)}>\r\n                        Back\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ScreamDialog\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n// material\r\nimport { Typography } from '@material-ui/core';\r\n// dayjs\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\n// util\r\nimport { MyButton } from '../util/MyButton';\r\n// icon\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\n// Components\r\nimport DeleteScream from './DeleteScream';\r\nimport ScreamDialog from './ScreamDialog';\r\nimport LikeButton from './LikeButton';\r\n\r\nconst Scream = (props: { index: any, openDialog?: boolean }) => {\r\n\r\n    dayjs.extend(relativeTime);\r\n    // get user to access likes and credentials\r\n    let user: any = useSelector((store: any) => store.user);\r\n    // get auth\r\n    const authenticated = useSelector((store: any) => store.user.authenticated);\r\n    // get current scream\r\n    const scream = useSelector((store: any) => store.data.screams[props.index]);\r\n    // const deleteButton\r\n    const deleteButton = authenticated && scream.userHandle === user.credentials.handle ?\r\n        (\r\n            <DeleteScream screamId={scream.screamId} />\r\n        ) : null;\r\n        \r\n    return (\r\n        <div>\r\n            <div className=\"card mb-1\" >\r\n                <div className=\"row no-gutters\">\r\n                    <div className=\"col-md-3\">\r\n                        <img src={scream.userImage} className=\"card-img\" alt=\"media\" />\r\n                    </div>\r\n                    <div className=\"col-md-9\">\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">\r\n                                <Typography \r\n                                component={Link} \r\n                                to={`/users/${scream.userHandle}`}>\r\n                                    {scream.userHandle}\r\n                                </Typography >\r\n                                <small>&nbsp;&nbsp;-&nbsp;{dayjs(scream.createdAt).fromNow()}</small>\r\n                            </h5>\r\n                            <span className=\"delete-button\">{deleteButton}</span>\r\n                            <p className=\"card-text\">\r\n                                {scream.body}<br />\r\n                                <LikeButton screamId={scream.screamId} />\r\n                                Likes: {scream.likeCount}\r\n                                <MyButton tip=\"Comments\">\r\n                                    <ChatIcon color=\"secondary\" />\r\n                                </MyButton>\r\n                            Comments: {scream.commentCount}\r\n                                <span className=\"expand-button\">\r\n                                    <ScreamDialog scream={scream} openDialog={props.openDialog}/>\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Scream;\r\n\r\n","import {\r\n    SET_USER,\r\n    SET_ERRORS,\r\n    CLEAR_ERRORS,\r\n    LOADING_UI,\r\n    SET_UNAUTHENTICATED,\r\n    LOADING_USER,\r\n    MARK_NOTIFICATIONS_READ\r\n} from '../types'\r\nimport axios from 'axios';\r\n\r\n// loginUser() seria un Middleware, es un punto medio entre las acciones que ejecuta el\r\n// usuario y el Reducer (donde se cambia de estado) \r\n\r\nexport const loginUser = (userData: any, history: any) =>\r\n    (dispatch: any) => {\r\n        dispatch({ type: LOADING_UI });\r\n        axios.post('/login', userData)\r\n            .then((res: any) => {\r\n                setAuthorizationHeader(res.data.token);\r\n                dispatch(getUserData());\r\n                dispatch({ type: CLEAR_ERRORS });\r\n                history.push('/'); // go to homepage\r\n            })\r\n            .catch((error: any) => {\r\n                dispatch({\r\n                    type: SET_ERRORS,\r\n                    payload: error.response.data\r\n                });\r\n            });\r\n    }\r\n\r\n// controla el sign up\r\nexport const signupUser = (newUserData: any, history: any) =>\r\n    (dispatch: any) => {\r\n        dispatch({ type: LOADING_UI });\r\n        axios.post('/signup', newUserData)\r\n            .then((res: any) => {\r\n                setAuthorizationHeader(res.data.token);\r\n                dispatch(getUserData());\r\n                dispatch({ type: CLEAR_ERRORS });\r\n                history.push('/'); // go to homepage\r\n            })\r\n            .catch((error: any) => {\r\n                dispatch({\r\n                    type: SET_ERRORS,\r\n                    payload: error.response.data\r\n                });\r\n            });\r\n    }\r\n\r\nexport const logoutUser = () => (dispatch: any) => {\r\n    localStorage.removeItem(\"Token\");\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    dispatch({ type: SET_UNAUTHENTICATED });\r\n};\r\n\r\n// set token header (codigo que se repite en login y signup)\r\nconst setAuthorizationHeader = (token: string) => {\r\n    localStorage.setItem('Token', `Bearer ${token}`);\r\n    axios.defaults.headers.common['Authorization'] = localStorage.getItem('Token');\r\n};\r\n// obtiene los datos del usuario logueado\r\nexport const getUserData = () => (dispatch: any) => {\r\n    dispatch({ type: LOADING_USER });\r\n    axios.get('/user')\r\n        .then((res: any) => {\r\n            dispatch({\r\n                type: SET_USER,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch((error: any) => console.log(error))\r\n}\r\n\r\n// upload image profile user\r\nexport const uploadImage = (formData: any) => (dispatch: any) => {\r\n    dispatch({ type: LOADING_USER });\r\n    axios.post('/user/img', formData)\r\n        .then(() => {\r\n            dispatch(getUserData());\r\n        })\r\n        .catch((error: any) => console.log(error));\r\n}\r\n\r\n// user edit\r\nexport const editUserDetails = (userDetail: any) => (dispatch: any) => {\r\n    dispatch({type: LOADING_USER});\r\n    axios.post('/user/', userDetail)\r\n    .then(() => {\r\n        dispatch(getUserData());\r\n    })\r\n    .catch(err => console.log(err));\r\n}\r\n\r\n// notifications\r\nexport const markNotificationsRead = (notificationsIds: any) => (dispatch: any) =>{\r\n    axios.post('/notifications/', notificationsIds)\r\n    .then(() =>{\r\n        dispatch({\r\n            type: MARK_NOTIFICATIONS_READ\r\n        })\r\n    })\r\n    .catch((err: any) => console.log(err))\r\n}","import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { editUserDetails } from '../redux/actions/userActions';\r\n// Material\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle\r\n} from '@material-ui/core';\r\n// Components\r\nimport Button from '@material-ui/core/Button';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { MyButton } from '../util/MyButton';\r\n\r\nlet detail = {\r\n    bio: '',\r\n    website: '',\r\n    location: ''\r\n}\r\ntype InputsTypes = {\r\n    bio?: string;\r\n    website?: string;\r\n    location?: string\r\n};\r\nconst EditDetails = () => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [userDetail, setUSerDetail] = useState(detail);\r\n    const { register, handleSubmit, reset } = useForm<InputsTypes>();\r\n    // useSelector es un Hook que nos permite extraer datos del store de Redux \r\n    const userCredentials = useSelector((store: any) => store.user.credentials);\r\n    // necessary for the Reducer\r\n    const dispatch = useDispatch();\r\n\r\n    // handle onsubmit\r\n    const onSubmit = (data: InputsTypes) => {\r\n        dispatch(editUserDetails(data));\r\n    }\r\n\r\n    // handle changes\r\n    const changeStateUser = () => {\r\n        setUSerDetail({\r\n            bio: userCredentials.bio ? userCredentials.bio : '',\r\n            website: userCredentials.website ? userCredentials.website : '',\r\n            location: userCredentials.location ? userCredentials.location : ''\r\n        });\r\n    }\r\n\r\n    // close dialog\r\n    const handleClose = () => {\r\n        reset();\r\n        setOpen(false);\r\n    }\r\n\r\n    // open dialog edit details\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        changeStateUser();\r\n    }, [userCredentials])\r\n    return (\r\n        <Fragment>\r\n            <MyButton onClick={handleOpen} tip=\"Edit details\">\r\n                <EditIcon color=\"primary\" />\r\n            </MyButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n            >\r\n                <DialogTitle >Edit your Details</DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"form-signin\">\r\n                        <textarea rows={3} name=\"bio\"\r\n                            placeholder=\"A short bio about yourself\"\r\n                            className=\"form-control\"\r\n                            defaultValue={userDetail.bio}\r\n                            ref={register({\r\n                                maxLength: 200\r\n                            })} /><br />\r\n                        <input name=\"website\" type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Your website\"\r\n                            defaultValue={userDetail.website}\r\n                            ref={register({\r\n                                maxLength: 40\r\n                            })} /><br />\r\n                        <input name=\"location\" type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Where you live\"\r\n                            defaultValue={userDetail.location}\r\n                            ref={register({\r\n                                maxLength: 40\r\n                            })} />\r\n                        <DialogActions>\r\n                            <button onClick={handleClose}\r\n                            type=\"button\"\r\n                                className=\"btn btn-link \">\r\n                                Cancel\r\n                            </button>\r\n                            <button type=\"submit\"\r\n                                className=\"btn btn-login btn-primary \" >\r\n                                Save\r\n                            </button>\r\n                        </DialogActions>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default EditDetails;","import React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { uploadImage, logoutUser } from '../redux/actions/userActions';\r\n// Icons\r\nimport LocationOn from '@material-ui/icons/LocationOn';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport CalendarToday from '@material-ui/icons/CalendarToday';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport KeyboardReturn from '@material-ui/icons/KeyboardReturn';\r\n// Material\r\nimport { Avatar, CircularProgress, createStyles, makeStyles, Paper, Theme, withStyles } from '@material-ui/core';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MuiLink from '@material-ui/core/Link';\r\nimport Divider from '@material-ui/core/Divider';\r\n// Days JS\r\nimport dayjs from 'dayjs';\r\nimport EditDetails from './EditDetails';\r\nimport { MyButton } from '../util/MyButton';\r\n\r\nconst StyledBadge = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        badge: {\r\n            backgroundColor: '#44b700',\r\n            color: '#44b700',\r\n            boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n            '&::after': {\r\n                position: 'absolute',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                borderRadius: '50%',\r\n                animation: '$ripple 1.2s infinite ease-in-out',\r\n                border: '1px solid currentColor',\r\n                content: '\"\"',\r\n            },\r\n        },\r\n        '@keyframes ripple': {\r\n            '0%': {\r\n                transform: 'scale(.8)',\r\n                opacity: 1,\r\n            },\r\n            '100%': {\r\n                transform: 'scale(2.4)',\r\n                opacity: 0,\r\n            },\r\n        },\r\n    }),\r\n)(Badge);\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n            },\r\n        },\r\n        large: {\r\n            width: theme.spacing(24),\r\n            height: theme.spacing(24),\r\n        },\r\n    }),\r\n);\r\nconst Profile = () => {\r\n\r\n    const classes = useStyles();\r\n    // useSelector es un Hook que nos permite extraer datos del store de Redux \r\n    const loadingUser = useSelector((store: any) => store.user.loading);\r\n    const authenticated = useSelector((store: any) => store.user.authenticated);\r\n    const userCredentials = useSelector((store: any) => store.user.credentials);\r\n    // necessary for the Reducer\r\n    const dispatch = useDispatch();\r\n\r\n    // handle image change\r\n    const handleImageChange = (event: any) => {\r\n        const image = event.target.files[0]; // la posicion 0 tiene el primer archivo cargado\r\n        const formData: any = new FormData();\r\n        formData.append('image', image, image.name); // el append nos pide 3 argumentos\r\n        dispatch(uploadImage(formData));\r\n    }\r\n\r\n    // handle edit picture\r\n    const handleEditPicture = () => {\r\n        const fileInput = document.getElementById(\"imageInput\");\r\n        fileInput?.click();\r\n    }\r\n\r\n    // handle logout user\r\n    const handleLogout = () => {\r\n        dispatch(logoutUser());\r\n    }\r\n\r\n    return (\r\n        !loadingUser ?\r\n            authenticated ?\r\n                <Fragment>\r\n                    <Paper className=\"classes.paper\">\r\n                        <div className=\"card-profile\">\r\n                            <div className=\"wrapper-image\">\r\n                                <StyledBadge\r\n                                    overlap=\"circle\"\r\n                                    anchorOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'right',\r\n                                    }}\r\n                                    variant=\"dot\"\r\n                                >\r\n                                    <Avatar src={userCredentials.imageUrl}\r\n                                        alt=\"profile\" className={classes.large} />\r\n                                </StyledBadge>\r\n\r\n                                <input type=\"file\" id=\"imageInput\" hidden={true}\r\n                                    onChange={handleImageChange} />\r\n                                <MyButton onClick={handleEditPicture} tip=\"Edit profile picture\">\r\n                                    <EditIcon color=\"primary\" />\r\n                                </MyButton>\r\n                            </div>\r\n                            <div className=\"profile-details\">\r\n                                <MuiLink\r\n                                    component={Link} to={`/users/${userCredentials.handle}`}\r\n                                    variant=\"h5\">\r\n                                    @{userCredentials.handle}\r\n                                </MuiLink>\r\n                                <hr />\r\n                                {userCredentials.bio &&\r\n                                    <Typography>\r\n                                        {userCredentials.bio}\r\n                                    </Typography>}\r\n                                <hr />\r\n                                {userCredentials.location &&\r\n                                    <Fragment>\r\n                                        <LocationOn />\r\n                                        <span> {userCredentials.location}</span>\r\n                                    </Fragment>}\r\n                                <hr />\r\n                                {userCredentials.website &&\r\n                                    <Fragment>\r\n                                        <LinkIcon color=\"primary\" />\r\n                                        <a\r\n                                            href={userCredentials.website}\r\n                                            target=\"_blank\"\r\n                                            rel=\"noopener noreferrer\">\r\n                                            {' '}{userCredentials.website}\r\n                                        </a>\r\n                                    </Fragment>\r\n\r\n                                }\r\n                                <hr />\r\n                                <CalendarToday />\r\n                                {' '}<span>Joined {dayjs(userCredentials.createdAt).format('MMM YYYY')}</span>\r\n                                <hr />\r\n                                <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                                    <MyButton onClick={handleLogout} tip=\"Logout\">\r\n                                        <KeyboardReturn color=\"primary\" />\r\n                                    </MyButton>\r\n                                    <EditDetails />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Paper>\r\n                </Fragment>\r\n                : <Fragment>\r\n                    <Paper className=\"py-4\">\r\n                        <Typography variant=\"body2\" align=\"center\">\r\n                            No profile found, please login again\r\n                        </Typography>\r\n                        <div className=\"no-profile-found py-1\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"small\"\r\n                                color=\"primary\"\r\n                                component={Link}\r\n                                className=\"button-no-profile\"\r\n                                to=\"/login\"\r\n                            >Login</Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                size=\"small\"\r\n                                component={Link}\r\n                                className=\"button-no-profile\"\r\n                                to=\"/signup\"\r\n                            > Signup</Button>\r\n                        </div>\r\n                    </Paper>\r\n                </Fragment>\r\n            : <Fragment>\r\n                <CircularProgress />\r\n            </Fragment>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React, { useEffect } from 'react';\r\n// components\r\nimport Scream from '../components/Scream';\r\nimport Profile from '../components/Profile';\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getScreams } from '../redux/actions/dataActions';\r\n// Material\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst Home = () => {\r\n\r\n    // get loading\r\n    const loading = useSelector((store: any) => store.UI.loading);\r\n    const screams = useSelector((store: any) => store.data.screams);\r\n    // need for Reducer\r\n    const dispatch = useDispatch();\r\n    // dispacth one time\r\n    useEffect(() => {\r\n        dispatch(getScreams());\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4 margin-bottom-profile \">\r\n                        <Profile />\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                        {/* <div className=\"row justify-content-md-center\">\r\n                            <div className=\"col-md-4\">\r\n                                <div className=\"box\">\r\n                                    <h6>Must Liked</h6>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4\">\r\n                                <div className=\"box\">\r\n                                    <h6>Must Comments</h6>\r\n                                </div>\r\n                            </div>\r\n                        </div> */}\r\n                        {!loading ? (screams.map((scream: any, index: number) =>\r\n                            <Scream\r\n                                key={scream.screamId}\r\n                                index={index}></Scream>\r\n                        )) :\r\n                            <CircularProgress />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Home;","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport iconGlobe from '../images/globo-max.png';\r\n// Icons\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n// redux staff\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { signupUser } from '../redux/actions/userActions';\r\n\r\ntype NewUser = {\r\n    email: string,\r\n    password: string,\r\n    confirmPassword: string,\r\n    handle: string\r\n};\r\n\r\nconst Signup = () => {\r\n\r\n    var loading: boolean = false;\r\n    const [errorGeneral, setErrorGeneral] = useState<any>({});\r\n    const { register, handleSubmit, errors, setError, getValues, clearErrors } = useForm<NewUser>();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const onSubmit = (data: NewUser) => {\r\n        loading = true;\r\n        dispatch(signupUser(data, history));\r\n    }\r\n\r\n    // check both passwords\r\n    const checkPassword = (e: any) => {\r\n        if (e !== getValues(\"password\")) {\r\n            setError(\"confirmPassword\", {\r\n                type: \"manual\"\r\n            })\r\n        }\r\n        else {\r\n            clearErrors(\"confirmPassword\")\r\n        };\r\n    }\r\n\r\n    // useSelector es un Hook que extrae datos del store de Redux \r\n    //utilizando una función selectora, seria como el componentWillReceiveProps (sin hooks)\r\n    const p = useSelector((store: any) => store.UI);\r\n\r\n    // handle change errors\r\n    useEffect(() => {\r\n        if (p.errors?.general) {\r\n            setErrorGeneral(p.errors)\r\n        }\r\n    }, [p])\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row\">\r\n                <div className=\"col\"></div>\r\n                <div className=\"col-md-6 card-login\">\r\n                    <div className=\"py-4 text-center\">\r\n                        <h1 className=\"title-login mb-3 font-weight-normal\">Sign Up</h1>\r\n                    </div>\r\n                    <div className=\"\">\r\n                        <form onSubmit={handleSubmit(onSubmit)} className=\"form-signin\">\r\n                            <input name=\"email\" type=\"email\"\r\n                                placeholder=\"your email\"\r\n                                pattern=\".+@gmail.com\"\r\n                                title=\"your email must be @gmail\"\r\n                                className=\"form-control\"\r\n                                ref={register({\r\n                                    required: true,\r\n                                    maxLength: 20\r\n                                })} />\r\n                                <small>Example: username@gmail.com</small>\r\n                            {errors.email && <span className=\"text-danger text-small d-block\">\r\n                                Email is required\r\n                                </span>}<br />\r\n                            <input name=\"password\" type=\"password\"\r\n                                className=\"form-control\" placeholder=\"password\"\r\n                                ref={register({\r\n                                    required: true,\r\n                                    minLength: 7,\r\n                                    maxLength: 15\r\n                                })} />\r\n                            <small>Must have at least 6 characters</small>\r\n                            {errors.password && <span className=\"text-danger text-small d-block\">\r\n                                Password is required\r\n                                </span>}<br />\r\n                            <input name=\"confirmPassword\" type=\"password\"\r\n                                className=\"form-control\" placeholder=\"repeat password\"\r\n                                onBlur={(e) => checkPassword(e.target.value)}\r\n                                ref={register({\r\n                                    required: true,\r\n                                    minLength: 7,\r\n                                    maxLength: 15\r\n                                })} />\r\n                            <small>Must match password</small>\r\n                            {errors.confirmPassword &&\r\n                                <span className=\"text-danger text-small d-block\">\r\n                                    Password not match\r\n                                </span>}<br />\r\n                            <input name=\"handle\" type=\"text\"\r\n                                placeholder=\"username\" className=\"form-control\"\r\n                                ref={register({\r\n                                    required: true,\r\n                                    maxLength: 15\r\n                                })} />\r\n                            {errors.handle && <span className=\"text-danger text-small d-block\">\r\n                                Username is required\r\n                                </span>}<br />\r\n                            {errorGeneral && <span className=\"text-danger text-small d-block\">\r\n                                {errorGeneral.general}\r\n                            </span>}\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-4\">\r\n                                    <button className=\"btn btn-primary btn-login\"\r\n                                        type=\"submit\">Sign up\r\n                                        {loading && (<CircularProgress size={30} />)}\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"col-md-8\">\r\n                                    <span>Have an account? </span>\r\n                                    <Link to=\"/login\" className=\"signin-login\"> Login here</Link>\r\n                                </div>\r\n                            </div>\r\n                            <br />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col\"></div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Signup;","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport userNoImg from '../images/no-img.png';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n//import CircularProgress from '@material-ui/core/CircularProgress';\r\n// redux staff\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginUser } from '../redux/actions/userActions';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\ntype Inputs = {\r\n    email: string,\r\n    password: string\r\n};\r\nconst Login = () => {\r\n\r\n    let loading: boolean = false;\r\n    const [errorGeneral, setErrorGeneral] = useState<any>({});\r\n    const { register, handleSubmit, errors } = useForm<Inputs>();\r\n    // necesarios para los Reducer\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const onSubmit = (data: Inputs) => {\r\n        loading = true;\r\n        dispatch(loginUser(data, history));\r\n    }\r\n\r\n    // useSelector es un Hook que nos permite extraer datos del store de Redux \r\n    //utilizando una función selectora, seria como el componentWillReceiveProps (sin hooks)\r\n    const p = useSelector((store: any) => store.UI);\r\n\r\n    // handle change errors\r\n    useEffect(() => {\r\n        if (p.errors?.general) {\r\n            setErrorGeneral(p.errors)\r\n        }\r\n    }, [p])\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row\">\r\n                <div className=\"col\"></div>\r\n                <div className=\"col-md-6 card-login\">\r\n                    <div className=\"py-4 text-center\">\r\n                        <img className=\"mb-4\" src={userNoImg} alt=\"\" width=\"76\" height=\"76\" />\r\n                        <h1 className=\"title-login mb-3 font-weight-normal\">Welcome</h1>\r\n                    </div>\r\n                    <div className=\"\">\r\n                        <form onSubmit={handleSubmit(onSubmit)} className=\"form-signin\">\r\n                            <input name=\"email\" type=\"email\"\r\n                                placeholder=\"your email\" className=\"form-control\"\r\n                                pattern=\".+@gmail.com\"\r\n                                title=\"your email must be @gmail\"\r\n                                ref={register({\r\n                                    required: true,\r\n                                    maxLength: 20\r\n                                })} />\r\n                                <small>Example: username@gmail.com</small>\r\n                            {errors.email && <span className=\"text-danger text-small d-block\">\r\n                                Email is required\r\n                                </span>}<br />\r\n                            <input name=\"password\" type=\"password\"\r\n                                className=\"form-control\" placeholder=\"password\"\r\n                                ref={register({\r\n                                    required: true,\r\n                                    minLength: 7,\r\n                                    maxLength: 15\r\n                                })} />\r\n                                <small>Must have at least 6 characters</small>\r\n                            {errors.password && <span className=\"text-danger text-small d-block\">\r\n                                Password is required\r\n                                </span>}\r\n                            <br />\r\n                            {errorGeneral && <span className=\"text-danger text-small d-block\">\r\n                                {errorGeneral.general}\r\n                            </span>}\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-3\">\r\n                                    <button className=\"btn btn-login btn-primary\"\r\n                                        type=\"submit\" >Login\r\n                                        {loading && (<CircularProgress color=\"secondary\" size={30} />)}\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"col-md-9\">\r\n                                    <span>Don't have an account? </span>\r\n                                    <Link to=\"/signup\" className=\"signin-login\"> Sign in here</Link>\r\n                                </div>\r\n                            </div>\r\n                            <br />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col\"></div>\r\n            </div>\r\n            \r\n        </Fragment>\r\n    )\r\n}\r\nexport default Login;","import React, { Fragment, useState } from 'react';\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// Material\r\nimport {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle\r\n} from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { useForm } from 'react-hook-form';\r\nimport { MyButton } from '../util/MyButton';\r\nimport { postScream } from '../redux/actions/dataActions';\r\n\r\ntype Inputs = {\r\n    body: string\r\n};\r\n\r\nconst PostScream = () => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const { register, handleSubmit } = useForm<Inputs>();\r\n    // necessary for the Reducer\r\n    const dispatch = useDispatch();\r\n    // get data from store\r\n    const loading = useSelector((store: any) => store.UI.loading);\r\n\r\n    // handle open Dialog\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    // handle close Dialog\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n    // handle onsubmit\r\n    const onSubmit = (newPost: Inputs) => {\r\n        dispatch(postScream(newPost));\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <MyButton onClick={handleOpen} tip=\"Post a Scream\">\r\n                <AddCircleIcon color=\"primary\"></AddCircleIcon>\r\n            </MyButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n            >\r\n\r\n                <DialogTitle> Post a new Screams</DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"form-signin\">\r\n                        <textarea rows={3} name=\"body\"\r\n                            placeholder=\"What are you thinking?\"\r\n                            className=\"form-control\"\r\n                            maxLength={150}\r\n                            ref={register({\r\n                                required: true,\r\n                                maxLength: 150\r\n                            })} /><br />\r\n                        {/* <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\"submit-button\"\r\n                            disabled={loading}\r\n                        >Submit\r\n                            {loading && (\r\n                                <CircularProgress\r\n                                    className=\"progress-spiner\"\r\n                                    size={30}\r\n                                />\r\n                            )}\r\n                        </Button>\r\n                        <MyButton\r\n                            tip=\"Close\"\r\n                            onClick={handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </MyButton> */}\r\n\r\n                        <button onClick={handleClose}\r\n                            type=\"button\"\r\n                            className=\"btn btn-link\">\r\n                            Cancel\r\n                            </button>\r\n                        <button type=\"submit\"\r\n                            className=\"btn btn-login btn-primary \"\r\n                            disabled={loading} >\r\n                            Submit\r\n                            {loading && (\r\n                                <CircularProgress\r\n                                    className=\"progress-spiner\"\r\n                                    size={30}\r\n                                />\r\n                            )}\r\n                        </button>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default PostScream\r\n","import React, { useState, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\n// MUI stuff\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Badge from '@material-ui/core/Badge';\r\n// Icons\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { markNotificationsRead } from '../redux/actions/userActions';\r\n\r\nconst Notifications = () => {\r\n\r\n    // necessary for the Reducer\r\n    const dispatch = useDispatch();\r\n    // set anchor Element\r\n    const [state, setState] = useState<any>({\r\n        anchorEl: null\r\n    });\r\n    // data of the store\r\n    const notifications = useSelector((store: any) => store.user.notifications);\r\n    // handles\r\n    const handleOpen = (event: any) => {\r\n        setState({ anchorEl: event.target });\r\n    };\r\n    const handleClose = () => {\r\n        setState({ anchorEl: null });\r\n    };\r\n    const onMenuOpened = () => {\r\n        let unreadNotificationsIds = notifications\r\n            .filter((not: any) => !not.read)\r\n            .map((not: any) => not.notificationId);\r\n        if (unreadNotificationsIds.length > 0)\r\n            dispatch(markNotificationsRead(unreadNotificationsIds));\r\n    };\r\n\r\n    dayjs.extend(relativeTime);\r\n    let notificationsIcon = <NotificationsIcon />;\r\n    if (notifications && notifications.length > 0) {\r\n        let countNot = notifications.filter((not: any) => not.read === false);\r\n        let c = <Badge badgeContent={countNot.length} color=\"secondary\"><NotificationsIcon /></Badge>;\r\n        countNot.length > 0 ?\r\n            notificationsIcon = c : notificationsIcon = <NotificationsIcon />;\r\n    } else {\r\n        notificationsIcon = <NotificationsIcon />;\r\n    }\r\n\r\n    // ----------\r\n    let notificationsMarkup =\r\n        notifications && notifications.length > 0 ? (\r\n            notifications.map((not: any) => {\r\n                const verb = not.type === 'like' ? 'liked' : 'commented on';\r\n                const time = dayjs(not.createdAt).fromNow();\r\n                const iconColor = not.read ? 'primary' : 'secondary';\r\n                const icon =\r\n                    not.type === 'like' ? (\r\n                        <FavoriteIcon color={iconColor} style={{ marginRight: 10 }} />\r\n                    ) : (\r\n                            <ChatIcon color={iconColor} style={{ marginRight: 10 }} />\r\n                        );\r\n\r\n                return (\r\n                    <MenuItem key={not.createdAt} onClick={handleClose}>\r\n                        {icon}\r\n                        <Typography\r\n                            component={Link}\r\n                            // color=\"default\"\r\n                            variant=\"body1\"\r\n                            to={`/users/${not.recipient}/scream/${not.screamId}`}\r\n                        >\r\n                            {not.sender} {verb} your scream {time}\r\n                        </Typography>\r\n                    </MenuItem>\r\n                );\r\n            })\r\n        ) : (\r\n                <MenuItem onClick={handleClose}>\r\n                    You have no notifications yet\r\n                </MenuItem>\r\n            );\r\n    return (\r\n        <Fragment>\r\n            <Tooltip placement=\"top\" title=\"Notifications\">\r\n                <IconButton\r\n                    aria-owns={state.anchorEl ? 'simple-menu' : undefined}\r\n                    aria-haspopup=\"true\"\r\n                    onClick={(e) => handleOpen(e)}\r\n                >\r\n                    {notificationsIcon}\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n                anchorEl={state.anchorEl}\r\n                open={Boolean(state.anchorEl)}\r\n                onClose={handleClose}\r\n                onEntered={onMenuOpened}\r\n            >\r\n                {notificationsMarkup}\r\n            </Menu>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Notifications\r\n","import React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// material ui\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\n// Components\r\nimport PostScream from './PostScream';\r\nimport Notifications from './Notifications';\r\nimport { MyButton } from '../util/MyButton';\r\n// Icons\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nconst Navbar = () => {\r\n\r\n    // get data from store\r\n    const authenticated = useSelector((store: any) => store.user.authenticated);\r\n\r\n    return (\r\n        <Fragment>\r\n            <AppBar>\r\n                <Toolbar className=\"nav-container\">\r\n                    {authenticated ? (\r\n                        <Fragment>\r\n                            <PostScream />\r\n                            <Link to=\"/\">\r\n                                <MyButton tip=\"Home\">\r\n                                    <HomeIcon color=\"action\"/>\r\n                                </MyButton>\r\n                            </Link>\r\n                            <Notifications />\r\n                        </Fragment>\r\n                    ) : (\r\n                            <Fragment>\r\n                                <Button color=\"inherit\" component={Link} to=\"/login\">\r\n                                    Login\r\n                                </Button>\r\n                                <Button color=\"inherit\" component={Link} to=\"/\">\r\n                                    Home\r\n                                </Button>\r\n                                <Button color=\"inherit\" component={Link} to=\"/signup\">\r\n                                    Signup\r\n                                </Button>\r\n                            </Fragment>\r\n                        )}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect, Route } from \"react-router-dom\";\r\ninterface Props {\r\n  component: any,\r\n  [rest: string]: any // All other props\r\n}\r\nconst AuthRoute = ({ component: Component, rest }: Props) => {\r\n\r\n  // useSelector es un Hook que nos permite extraer datos del store de Redux \r\n  const authenticated = useSelector((store: any) => store.user.authenticated? true: false);\r\n\r\n  return(\r\n    <Route\r\n      {...rest}\r\n      component={(props: any) => authenticated === true ? <Redirect to='/' /> : <Component {...props} />}\r\n    />\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default AuthRoute;\r\n","import { MARK_NOTIFICATIONS_READ } from '../types';\r\nimport {\r\n    SET_USER,\r\n    SET_AUTHENTICATED,\r\n    SET_UNAUTHENTICATED,\r\n    LOADING_USER,\r\n    LIKE_SCREAM,\r\n    UNLIKE_SCREAM\r\n} from '../types';\r\n\r\nconst initialState = {\r\n    authenticated: false,\r\n    loading: false,\r\n    credentials: {},\r\n    likes: [],\r\n    notifications: []\r\n}\r\n\r\nexport const userReducer = (state: any = initialState, action: any) => {\r\n\r\n    // depend the action, do something\r\n    switch (action.type) {\r\n        case SET_AUTHENTICATED:\r\n            return {\r\n                ...state,\r\n                authenticated: true\r\n            };\r\n        case SET_UNAUTHENTICATED:\r\n            return initialState;\r\n        case SET_USER:\r\n            return {\r\n                authenticated: true,\r\n                loading: false,\r\n                ...action.payload\r\n            };\r\n        case LOADING_USER:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case LIKE_SCREAM:\r\n            return {\r\n                ...state,\r\n                likes: [\r\n                    ...state.likes,\r\n                    {\r\n                        userHandle: state.credentials.handle,\r\n                        screamId: action.payload.screamId\r\n                    }\r\n                ]\r\n            }\r\n        case UNLIKE_SCREAM:\r\n            return {\r\n                ...state,\r\n                likes: state.likes.filter(\r\n                    (like: any) => like.screamId !== action.payload.screamId\r\n                )\r\n            }\r\n        case MARK_NOTIFICATIONS_READ:\r\n            state.notifications.forEach((not:any) => (not.read = true));\r\n            return {\r\n                ...state\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { POST_SCREAM } from '../types';\r\nimport {\r\n    SET_SCREAM,\r\n    LOADING_DATA,\r\n    LIKE_SCREAM,\r\n    UNLIKE_SCREAM,\r\n    SET_SCREAMS,\r\n    DELETE_SCREAM,\r\n    SUBMIT_COMMENT\r\n} from '../types';\r\n\r\nconst initialState = {\r\n    screams: [],\r\n    scream: {},\r\n    loading: false\r\n}\r\nexport const dataReducer = (state: any = initialState, action: any) => {\r\n    // depend the action, do something\r\n    switch (action.type) {\r\n        case LOADING_DATA:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case SET_SCREAMS:\r\n            return {\r\n                ...state,\r\n                screams: action.payload\r\n            };\r\n        case SET_SCREAM:\r\n            return {\r\n                ...state,\r\n                scream: action.payload\r\n            };\r\n        case LIKE_SCREAM:\r\n        case UNLIKE_SCREAM:\r\n            // find index of the scream\r\n            let index = state.screams.findIndex(\r\n                (scream: any) => scream.screamId === action.payload.screamId\r\n            );\r\n            state.screams[index] = action.payload;\r\n            // is for update likes scream dialog\r\n            if (state.scream.screamId === action.payload.screamId) {\r\n                // state.scream = action.payload; // con esta linea me pierde los comentarios en el dialog\r\n                state.scream = {\r\n                    ...state.scream,\r\n                    likeCount: action.payload.likeCount\r\n                }\r\n            }\r\n            return {\r\n                ...state\r\n            };\r\n\r\n        case DELETE_SCREAM:\r\n            let indexDelete = state.screams.findIndex(\r\n                (scream: any) => scream.screamId === action.payload\r\n            );\r\n            state.screams.splice(indexDelete, 1);\r\n            return {\r\n                ...state\r\n            }\r\n        case POST_SCREAM:\r\n            return {\r\n                ...state,\r\n                screams: [\r\n                    action.payload,\r\n                    ...state.screams\r\n                ]\r\n            }\r\n        case SUBMIT_COMMENT:\r\n            // find index of the scream\r\n            let indexComment = state.screams.findIndex(\r\n                (scream: any) => scream.screamId === action.payload.screamId\r\n            );\r\n            // update commentCount in screams \r\n            state.screams[indexComment] = {\r\n                ...state.screams[indexComment],\r\n                commentCount: (state.scream.commentCount + 1)\r\n            } \r\n            // update scream\r\n            state.scream = {\r\n                ...state.scream,\r\n                commentCount: (state.scream.commentCount + 1),\r\n                comments: [\r\n                    action.payload,\r\n                    ...state.scream.comments\r\n                ]\r\n            };\r\n            return {\r\n                ...state\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { SET_ERRORS, CLEAR_ERRORS, LOADING_UI, STOP_LOADING_UI } from '../types';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    errors: null\r\n}\r\n\r\nexport const uiReducer = (state = initialState, action: any) =>{\r\n    switch (action.type) {\r\n        case SET_ERRORS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errors: action.payload\r\n            }\r\n        case CLEAR_ERRORS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errors: null\r\n            }\r\n        case LOADING_UI:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            case STOP_LOADING_UI:\r\n                return {\r\n                    ...state,\r\n                    loading: false\r\n                }\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\n// el STORE contiene los states\r\n\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk';\r\n\r\n// definimos los Reducer que usaremos\r\nimport {userReducer} from './reducers/userReducer';\r\nimport {dataReducer} from './reducers/dataReducer';\r\nimport {uiReducer} from './reducers/uiReducer';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst reducers = combineReducers({\r\n    user: userReducer,\r\n    data: dataReducer,\r\n    UI: uiReducer\r\n});\r\n\r\nconst store = createStore(reducers, initialState,\r\n    compose(applyMiddleware(...middleware),\r\n    //(window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n    ));\r\n\r\nexport default store;\r\n// contendra el estado de la aplicacion","import React, { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n// Material\r\nimport { Avatar, Badge, createStyles, makeStyles, Paper, Theme, Typography, withStyles } from '@material-ui/core'\r\nimport { CalendarToday } from '@material-ui/icons';\r\nimport MuiLink from '@material-ui/core/Link';\r\nimport LocationOn from '@material-ui/icons/LocationOn';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\n// Days JS\r\nimport dayjs from 'dayjs';\r\n\r\nconst StyledBadge = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        badge: {\r\n            backgroundColor: '#44b700',\r\n            color: '#44b700',\r\n            boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n            '&::after': {\r\n                position: 'absolute',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                borderRadius: '50%',\r\n                animation: '$ripple 1.2s infinite ease-in-out',\r\n                border: '1px solid currentColor',\r\n                content: '\"\"',\r\n            },\r\n        },\r\n        '@keyframes ripple': {\r\n            '0%': {\r\n                transform: 'scale(.8)',\r\n                opacity: 1,\r\n            },\r\n            '100%': {\r\n                transform: 'scale(2.4)',\r\n                opacity: 0,\r\n            },\r\n        },\r\n    }),\r\n)(Badge);\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n            },\r\n        },\r\n        large: {\r\n            width: theme.spacing(24),\r\n            height: theme.spacing(24),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface profileUser {\r\n    handle: string,\r\n    createdAt: string,\r\n    imageUrl: string,\r\n    bio: string,\r\n    website: string,\r\n    location: string\r\n};\r\nconst StaticProfile = (props: { profile: any }) => {\r\n    const classes = useStyles();\r\n    const { handle, createdAt, imageUrl, bio, website, location } = props.profile;\r\n\r\n    return (\r\n        <Paper className=\"paper\">\r\n            <div className=\"\">\r\n                <div className=\"wrapper-image\">\r\n                    <StyledBadge\r\n                        overlap=\"circle\"\r\n                        anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'right',\r\n                        }}\r\n                        variant=\"dot\"\r\n                    >\r\n                        <Avatar\r\n                            src={imageUrl} alt=\"profile\"\r\n                            className={classes.large} />\r\n                    </StyledBadge>\r\n                </div>\r\n                <div className=\"profile-details\">\r\n                    <MuiLink\r\n                        component={Link}\r\n                        to={`/users/${handle}`}\r\n                        variant=\"h5\"\r\n                    >\r\n                        @{handle}\r\n                    </MuiLink>\r\n                    <hr />\r\n                    {bio && <Typography variant=\"body2\">{bio}</Typography>}\r\n                    <hr />\r\n                    {location && (\r\n                        <Fragment>\r\n                            <LocationOn color=\"primary\" /> <span>{location}</span>\r\n                            <hr />\r\n                        </Fragment>\r\n                    )}\r\n                    {website && (\r\n                        <Fragment>\r\n                            <LinkIcon color=\"primary\" />\r\n                            <a href={website} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                {' '}\r\n                                {website}\r\n                            </a>\r\n                            <hr />\r\n                        </Fragment>\r\n                    )}\r\n                    <CalendarToday color=\"primary\" />{' '}\r\n                    <span>Joined {dayjs(createdAt).format('MMM YYYY')}</span><br/>\r\n                </div>\r\n            </div>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default StaticProfile\r\n","import React, { useEffect, useState } from 'react'\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport axios from 'axios';\r\n// Components\r\nimport StaticProfile from '../components/StaticProfile';\r\nimport Scream from '../components/Scream';\r\n// Material\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nconst User = () => {\r\n\r\n    const [profile, setProfile] = useState(null);\r\n    // get params URL\r\n    const { handleParam, screamIdParam }: any = useParams();\r\n    // data of the store\r\n    const loading = useSelector((store: any) => store.UI.loading);\r\n    const screams = useSelector((store: any) => store.data.screams);\r\n\r\n    // set screamsMarkup\r\n    const screamsMarkup = loading ? (\r\n        // <p>Loading data...</p>\r\n        <CircularProgress />\r\n    ) : screams === null ? (\r\n        <p>No screams from this user</p>\r\n    ) : screamIdParam === undefined ? (\r\n        screams.map((scream: any, index: number) => {\r\n            if (scream.userHandle === handleParam)\r\n                return <Scream key={scream.screamId} index={index} />\r\n        }\r\n        )) : (\r\n                    screams.map((scream: any, index: number) => {\r\n                        if (scream.screamId !== screamIdParam) {\r\n                            if (scream.userHandle === handleParam)\r\n                                return <Scream key={scream.screamId} index={index} />\r\n                        }\r\n                        else return <Scream key={scream.screamId} index={index} openDialog />;\r\n                    })\r\n                );\r\n\r\n    useEffect(() => {\r\n        axios.get(`/user/${handleParam}`)\r\n            .then((res: any) => {\r\n                setProfile(res.data.user);\r\n            })\r\n            .catch((err: any) => {\r\n                console.log(err);\r\n            })\r\n\r\n    }, [handleParam])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4 margin-bottom-profile\">\r\n                        {profile === null ? (\r\n                            // <p>Loading profile...</p>\r\n                            <CircularProgress />\r\n                        ) : (\r\n                                <StaticProfile profile={profile} />\r\n                            )}\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                        {screamsMarkup}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './App.css';\n//import  MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\n// pages\nimport home from './pages/home';\nimport signup from './pages/signup';\nimport login from './pages/login';\n// components\nimport Navbar from './components/Navbar';\nimport AuthRoute from './util/AuthRoute';\n// jwt decode  --> https://www.npmjs.com/package/jwt-decode\nimport jwt_decode from \"jwt-decode\";\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { SET_AUTHENTICATED} from './redux/types';\nimport { logoutUser, getUserData } from './redux/actions/userActions';\nimport axios from 'axios';\nimport { getScreams } from './redux/actions/dataActions';\nimport User from './pages/user';\n\n// get token\nconst token = localStorage.getItem(\"Token\");\n//store.dispatch(getScreams());\nif (token) {\n  const decodeToken: any = jwt_decode(token);\n  if (decodeToken.exp * 1000 < Date.now()) // verificamos si expiro el token\n  {\n    //window.location.href = '/login';\n    store.dispatch(logoutUser());\n    \n  } else {\n    store.dispatch({type: SET_AUTHENTICATED});\n    axios.defaults.headers.common['Authorization'] = token;\n    store.dispatch(getUserData());\n\n  }\n}else{\n  // window.location.href = '/login';\n}\n\nfunction App() {\n  return (\n\n    <Provider store={store}>\n      <Router>\n        <Navbar />\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={home} ></Route>\n            <AuthRoute path=\"/login\" component={login} />\n            <AuthRoute path=\"/signup\" component={signup} />\n            <Route exact path=\"/users/:handleParam\" component={User} ></Route>\n            <Route\n                  exact\n                  path=\"/users/:handleParam/scream/:screamIdParam\"\n                  component={User}\n                />\n            {/* <Route path=\"/login\" component={login} authenticated={authenticated}></Route>\n            <Route path=\"/signup\" component={signup} authenticated={authenticated}></Route> */}\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/no-img.5405d77c.png\";"],"sourceRoot":""}